<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OKR 工作法</title>
      <link href="/2018/11/17/okr-gong-zuo-fa/"/>
      <url>/2018/11/17/okr-gong-zuo-fa/</url>
      
        <content type="html"><![CDATA[<p>OKR 工作法起源于英特尔，是谷歌、领英等顶级公司的高效秘籍。<br>书中通过一个创业故事引出了 OKR 工作法，并示范了应该怎样去使用它。同时总结了影响目标达成的关键因素、OKR 使用的六大场景以及使用 OKR 的建议。</p><p><img src="/2018/11/17/okr-gong-zuo-fa/okr-four.png" alt><br><img src="/2018/11/17/okr-gong-zuo-fa/OKR+工作法.svg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> OKR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 扩展包之 laravel-swoole</title>
      <link href="/2018/10/02/shen-ru-laravel-kuo-zhan-bao-zhi-laravel-swoole/"/>
      <url>/2018/10/02/shen-ru-laravel-kuo-zhan-bao-zhi-laravel-swoole/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Swoole 让 Laravel 的性能提升了很多，但 Laravel 并非按 Swoole 的架构去设计的，将两者结合在一起使用需要做一些处理。这篇文章让我们一起来看看 laravel-swoole 这个包是怎么把 Laravel 和 Swoole 结合起来的。</p><h1 id="Swoole-架构"><a href="#Swoole-架构" class="headerlink" title="Swoole 架构"></a>Swoole 架构</h1><h2 id="Swoole-架构-1"><a href="#Swoole-架构-1" class="headerlink" title="Swoole 架构"></a>Swoole 架构</h2><p>Swoole 是 laravel-swoole 这个包的基础，理解 Swoole 的架构是深入这个包的前提条件。</p><p><img src="/2018/10/02/shen-ru-laravel-kuo-zhan-bao-zhi-laravel-swoole/swoole-arch.png" alt></p><p>上图是 swoole 的架构图。大体上，我们需要了解以下几点：</p><ul><li><p>Master Process: 原来执行 PHP 脚本代码的进程，它会创建一个主 Reactor 和一个 Manager，它是整个应用程序的根进程</p></li><li><p>Main Reactor: Reactor 在 Swoole 中是一个多线程和完全异步的，实现上使用了 Linux 的 epoll 或者 OSX 的 kqueue。Reactor 主要负责接收请求和分发给 Manager 进程。简单来说，它的功能相当于 nginx。</p></li><li><p>Manager: Manager 进程会创建多个 Worker 进程。当有 Worker 结束的时候，它会根据配置的 Worker 数量，自动创建一个新的 Worker 进程。</p></li><li><p>Worker: 所有请求的逻辑都会在 Worker 处理。</p></li><li><p>Task Worker: 功能和 Worker 进程一样，但只处理 Worker 分发过来的任务，Workers 可以把任务异步地分发到任务队列。Task Workers 负责消费队列中的任务。</p></li></ul><p>Laravel 工作在 Worker 进程。当 Worker 启动的时候，每个 Laravel 程序会被加载和初始化，且只会被加载和初始化一次。就是说 Laravel 会常驻内存，不需要每次处理一个请求就加载整个 Laravel。</p><p>这是我们加速 Laravel 的关键点，但同时也会带来一些奇奇怪怪的问题。容器是 Laravel 的核心，用于绑定、单例、解析程序、依赖注入等等。</p><p>一般来说，我们不需要关注全局属性、静态类、单例的使用，但现在要了。</p><p>因为 Laravel 会常驻内存，并且只会在程序启动的时候初始化一次，所以对 Laravel 的所有修改都会被保持，除非你重置它。</p><p>例如，auth 在 Laravel 中会被注册为单例。以下是 SessionGaurd 的部分代码：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一段获取已经解析的用户对象的代码，看起来非常平常。但是在我们的场景下，这是一个致命的问题。在第一次解析了用户之后，这段代码会导致你获取了错误的用户对象。</p><p>有没有解决办法呢? 当然有，laravel-swoole 这个包提供了一个沙盒来防止这些 BUG。</p><h2 id="沙盒容器"><a href="#沙盒容器" class="headerlink" title="沙盒容器"></a>沙盒容器</h2><p>每个请求都会创建一个独立的沙盒来处理。</p><p>所有的容器会在一个沙盒容器中被处理，所有的变化不会影响 Laravel 的初始化状态。容器绑定也会在每个请求中被解析，这意味着单例的实例只会在当前的请求存在，不会干扰其他请求。</p><p>以下实例不需要重复解析，所以会被预先解析：</p><pre><code>&#39;view&#39;, &#39;files&#39;, &#39;session&#39;, &#39;session.store&#39;, &#39;routes&#39;,&#39;db&#39;, &#39;db.factory&#39;, &#39;cache&#39;, &#39;cache.store&#39;, &#39;config&#39;, &#39;cookies&#39;,&#39;encrypter&#39;, &#39;hash&#39;, &#39;router&#39;, &#39;translator&#39;, &#39;url&#39;, &#39;log&#39;</code></pre><blockquote><p>在 v2.5.0 之后，你可以在 swoole_http.php 的 pre_resolved 配置中定制预解析列表。</p></blockquote><p>还有一个 instances 配置，可以让你配置每个请求都还原。</p><pre><code>&#39;instances&#39; =&gt; [    &#39;instanceA&#39;, &#39;instanceB&#39;],</code></pre><blockquote><p>这样做依然无法全局变量和静态变量的修改，如果你不清楚那些全局变量和静态变量是干嘛的，最后避免使用它们。</p></blockquote><h1 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h1><h2 id="数据共享-1"><a href="#数据共享-1" class="headerlink" title="数据共享"></a>数据共享</h2><p>如上节所述，Laravel 的程序运行在不同的 Workder 进程中，变量在不同进程之间是无法共享的。</p><p><img src="/2018/10/02/shen-ru-laravel-kuo-zhan-bao-zhi-laravel-swoole/data-sharing.png" alt></p><p>每个 Worker 进程有自己的变量和内存分配，Laravel 常驻内存并不意味着我们可以在不同进程直接共享数据。</p><p>但我们可以有很多在进程间共享数据的办法：</p><ul><li>Databases 如 MySQL and Redis</li><li>APCu - APC User Cache</li><li>Swoole Table</li></ul><h2 id="Swoole-Table"><a href="#Swoole-Table" class="headerlink" title="Swoole Table"></a>Swoole Table</h2><p>在 swoole_http.php 配置中，你可以自定义 Swoole Table：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Swoole<span class="token punctuation">\</span>Table</span><span class="token punctuation">;</span><span class="token string">'tables'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// define your table name here</span>    <span class="token string">'table_name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// table rows number</span>        <span class="token string">'size'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1024</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// column name, column type and column type size are optional for int and float type</span>        <span class="token string">'columns'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'column_name1'</span><span class="token punctuation">,</span> <span class="token string">'type'</span> <span class="token operator">=</span><span class="token operator">></span> Table<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_INT</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'column_name2'</span><span class="token punctuation">,</span> <span class="token string">'type'</span> <span class="token operator">=</span><span class="token operator">></span> Table<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">,</span> <span class="token string">'size'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>Swoole Table 有三种类型：</p><ol><li>TYPE_INT: 1，2，4，8</li><li>TYPE_FLOAT: 8</li><li>TYPE_STRING: the nth power of 2</li></ol><h3 id="Swoole-Table-用法"><a href="#Swoole-Table-用法" class="headerlink" title="Swoole Table 用法"></a>Swoole Table 用法</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">use</span> <span class="token package">SwooleTW<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Table<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Table</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// get a table by its name</span>    <span class="token variable">$table</span> <span class="token operator">=</span> Table<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'table_name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// update a row of the table by key</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get a row of the table by key</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// delete a row of the table by key</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check if a row is existed by key</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exist</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// count the rows in the table</span>    <span class="token variable">$table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h2><p><img src="/2018/10/02/shen-ru-laravel-kuo-zhan-bao-zhi-laravel-swoole/src-arch.png" alt></p><p>各目录的职责如下：</p><ul><li>Commands：实现 swoole:http 命令</li><li>Controllers：提供给客户端请求 Websocket 的 API</li><li>Server：http server 相关</li><li>Table：Swoole Table 相关</li><li>Websocket：Websocket 相关</li></ul><p>其中最主要的代码是 LaravelServiceProvider.php、Server/Manager.php 和 Server/Sandbox.php。</p><h2 id="ServiceProvider"><a href="#ServiceProvider" class="headerlink" title="ServiceProvider"></a>ServiceProvider</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">SwooleTW<span class="token punctuation">\</span>Http</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HttpServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Register the service provider.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">mergeConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">SwooleTW<span class="token punctuation">\</span>Http</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">SwooleTW<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Server<span class="token punctuation">\</span>Manager</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LaravelServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServiceProvider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Register manager.     *     * @return void     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">registerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">'swoole.http'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">,</span> <span class="token string">'laravel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看到，在 service provider 主要做了 3 件事：</p><ul><li>整合配置</li><li>注册 http server manager</li><li>注册 artisan 命令</li></ul><h2 id="Http-Server-Manager"><a href="#Http-Server-Manager" class="headerlink" title="Http Server Manager"></a>Http Server Manager</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">SwooleTW<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Server</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Manager</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * HTTP server manager constructor.     *     * @param \Illuminate\Contracts\Container\Container $container     * @param string $framework     * @param string $basePath     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Container <span class="token variable">$container</span><span class="token punctuation">,</span> <span class="token variable">$framework</span><span class="token punctuation">,</span> <span class="token variable">$basePath</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span> <span class="token operator">=</span> <span class="token variable">$container</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">framework</span> <span class="token operator">=</span> <span class="token variable">$framework</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">basePath</span> <span class="token operator">=</span> <span class="token variable">$basePath</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Run swoole server.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Stop swoole server.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * "onStart" listener.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setProcessName</span><span class="token punctuation">(</span><span class="token string">'master process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPidFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token punctuation">[</span><span class="token string">'events'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">'swoole.start'</span><span class="token punctuation">,</span> <span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * "onWorkerStart" listener.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onWorkerStart</span><span class="token punctuation">(</span>HttpServer <span class="token variable">$server</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setProcessName</span><span class="token punctuation">(</span><span class="token string">'worker process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token punctuation">[</span><span class="token string">'events'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">'swoole.workerStart'</span><span class="token punctuation">,</span> <span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// don't init laravel app in task workers</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$server</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">taskworker</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// clear events instance in case of repeated listeners in worker process</span>        Facade<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">clearResolvedInstance</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// initialize laravel app</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLaravelApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// bind after setting laravel app</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindToLaravelApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set application to sandbox environment</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sandbox</span> <span class="token operator">=</span> Sandbox<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// load websocket handlers after binding websocket to laravel app</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">isWebsocket</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setWebsocketHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadWebsocketRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * "onRequest" listener.     *     * @param \Swoole\Http\Request $swooleRequest     * @param \Swoole\Http\Response $swooleResponse     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token variable">$swooleRequest</span><span class="token punctuation">,</span> <span class="token variable">$swooleResponse</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">[</span><span class="token string">'events'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">'swoole.request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetOnRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$handleStatic</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'swoole_http.handle_static_files'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// transform swoole request to illuminate request</span>            <span class="token variable">$illuminateRequest</span> <span class="token operator">=</span> Request<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$swooleRequest</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toIlluminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// handle static file request first</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$handleStatic</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handleStaticRequest</span><span class="token punctuation">(</span><span class="token variable">$illuminateRequest</span><span class="token punctuation">,</span> <span class="token variable">$swooleResponse</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// set current request to sandbox</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sandbox</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRequest</span><span class="token punctuation">(</span><span class="token variable">$illuminateRequest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// enable sandbox</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sandbox</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$application</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sandbox</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// handle request via laravel/lumen's dispatcher</span>            <span class="token variable">$illuminateResponse</span> <span class="token operator">=</span> <span class="token variable">$application</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token variable">$illuminateRequest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$response</span> <span class="token operator">=</span> Response<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$illuminateResponse</span><span class="token punctuation">,</span> <span class="token variable">$swooleResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$response</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token variable">$exceptionResponse</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">[</span>ExceptionHandler<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token variable">$illuminateRequest</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$response</span> <span class="token operator">=</span> Response<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$exceptionResponse</span><span class="token punctuation">,</span> <span class="token variable">$swooleResponse</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$response</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">logServerError</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// disable and recycle sandbox resource</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sandbox</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Set onTask listener.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onTask</span><span class="token punctuation">(</span>HttpServer <span class="token variable">$server</span><span class="token punctuation">,</span> <span class="token variable">$taskId</span><span class="token punctuation">,</span> <span class="token variable">$srcWorkerId</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token punctuation">[</span><span class="token string">'events'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">'swoole.task'</span><span class="token punctuation">,</span> <span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// push websocket message</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">isWebsocket</span>                <span class="token operator">&amp;&amp;</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span> <span class="token operator">===</span> Websocket<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PUSH_ACTION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">logServerError</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Set onShutdown listener.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">removePidFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Initialize.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setProcessName</span><span class="token punctuation">(</span><span class="token string">'manager process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepareWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createSwooleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">configureSwooleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSwooleServerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可以看到，Http Server Manager 的职责是对整个 Http Server 进行管理，包括初始化、启动 Server、停止 Server、监听事件等。</p><h3 id="初始化主要做了以下工作："><a href="#初始化主要做了以下工作：" class="headerlink" title="初始化主要做了以下工作："></a>初始化主要做了以下工作：</h3><ul><li>创建 Swoole Table，用于进程间共享数据</li><li>初始化 Websocket</li><li>创建 Swoole Http Server</li><li>配置 Swoole Http Server</li><li>配置监听器</li></ul><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>启动 http server</p><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p>关闭 http server</p><h3 id="onStart"><a href="#onStart" class="headerlink" title="onStart"></a>onStart</h3><p>http server 启动的时候回调该函数。在该函数中，主要把 http server 进程的 PID 记录到文件，发送 ‘swoole.start’ 事件</p><h3 id="onWorkerStart"><a href="#onWorkerStart" class="headerlink" title="onWorkerStart"></a>onWorkerStart</h3><p>在 Worker 进程启动的时候回调该函数。在该函数中，主要做了以下事情：</p><ul><li>清除 OPCode 缓存</li><li>发送 swoole.workerStart 事件</li><li>清除 Facade 已解析过的实例</li><li>创建 \SwooleTW\Http\Server\Application</li><li>绑定 swoole.server 和 swoole.table</li><li>创建沙盒</li></ul><h3 id="onRequest"><a href="#onRequest" class="headerlink" title="onRequest"></a>onRequest</h3><p>在收到一个完整的Http请求后，会回调此函数。在该函数中，主要做了以下事情：</p><ul><li>发送 swoole.request 事件</li><li>处理静态文件的请求</li><li>开启沙盒</li><li>用 laravel/lumen 的分发器处理请求</li><li>返回结果给客户端</li></ul><h3 id="onTask"><a href="#onTask" class="headerlink" title="onTask"></a>onTask</h3><p>在 task worker 进程内被调用。在该函数中，主要做了以下事情：</p><ul><li>发送 swoole.task 事件</li><li>处理 Websocke 消息</li></ul><h3 id="onShutdown"><a href="#onShutdown" class="headerlink" title="onShutdown"></a>onShutdown</h3><p>当 http server 正常结束时调用该函数。该函数主要删除记录 http server 进程 PID 的文件。</p><h2 id="Sandbox"><a href="#Sandbox" class="headerlink" title="Sandbox"></a>Sandbox</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">SwooleTW<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Server</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Sandbox</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Sandbox constructor.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Application <span class="token variable">$application</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setApplication</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setInitialConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setInitialProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Get an application snapshot     *     * @return \SwooleTW\Http\Server\Application     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">snapshot</span> <span class="token keyword">instanceOf</span> <span class="token class-name">Application</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">snapshot</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">enabled</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SandboxException</span><span class="token punctuation">(</span><span class="token string">'Sandbox is not enabled yet.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">snapshot</span> <span class="token operator">=</span> clone <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">application</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Reset Laravel/Lumen Application.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">resetLaravelApp</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetConfigInstance</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetSession</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetCookie</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">clearInstances</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindRequest</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rebindRouterContainer</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rebindViewContainer</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetProviders</span><span class="token punctuation">(</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Set laravel snapshot to container and facade.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">enabled</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setInstance</span><span class="token punctuation">(</span><span class="token variable">$app</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLaravelApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetLaravelApp</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>sandbox 会在 Worker 进程启动的时候创建，每次接收到请求的时候 enable，所以沙盒的代码中，主要部分是构造函数和 enable 。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>主要做的事情：</p><ul><li>设置 SwooleTW\Http\Serve\Application 实例</li><li>复制一份 laravel 的 config </li><li>初始化自定义的 service providers</li></ul><h3 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h3><p>主要做的事情：</p><ul><li>设置一个 laravel 容器快照到沙盒中</li><li>reset laravel 绑定的如 config、session、cookie 等实例</li></ul><p>沙盒在每次 enable 的时候，都会设置一个 laravel 容器的快照到沙盒中，每次接收到新的请求，Swoole Server Manager 中 onRequest 的回调都会通过沙盒来执行程序，实现隔离所有请求的效果。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章中，我们了解以下几点：</p><ul><li>Swoole 架构</li><li>进程间共享数据的 Swoole Table</li><li>源码结构</li><li>ServiceProvider、Swoole Http Manager 和 Sandbox 源码分析</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/swooletw/laravel-swoole/wiki" target="_blank" rel="noopener">https://github.com/swooletw/laravel-swoole/wiki</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> swoole </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Swoole 给 Laravel 加速</title>
      <link href="/2018/09/23/yong-swoole-gei-laravel-jia-su/"/>
      <url>/2018/09/23/yong-swoole-gei-laravel-jia-su/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="https://laravel-news.com/laravel-swoole" target="_blank" rel="noopener">https://laravel-news.com/laravel-swoole</a></p><p>之前在 <a href="https://lidelin.github.io/2018/08/26/Swoole-%E5%88%9D%E6%8E%A2/">Swoole 初探</a> 对 swoole 有了个初步认识，今天我们来看看 swoole 和 laravel 结合会给 laravel 带来什么样的变化。<br>我们今天用的包是 <a href="https://github.com/swooletw/laravel-swoole" target="_blank" rel="noopener">swooletw/laravel-swoole</a>。</p><h1 id="为什么要让-Laravel-跑在-Swoole-上"><a href="#为什么要让-Laravel-跑在-Swoole-上" class="headerlink" title="为什么要让 Laravel 跑在 Swoole 上"></a>为什么要让 Laravel 跑在 Swoole 上</h1><p><img src="/2018/09/23/yong-swoole-gei-laravel-jia-su/Vjtm7I9-1.png" alt></p><p>上面这幅图描述了 PHP 的生命周期。从上图可以看出，每次执行 PHP 脚本时，PHP 都要初始化基础模块、运行 Zend 引擎和把 PHP 脚本编译成 OpCodes。<br>运行环境在每次处理完一个请求后都会被销毁，所以上图的流程每次处理请求的时候都要重头执行一次。也就是说，每次处理请求时，都要浪费大量的资源来初始化环境。<br>再想想 Laravel，每处理一个请求要加载多少文件？这些重复的流程浪费了大量的 I/O 。<br>利用 Swoole，可以 PHP 程序常驻内存，不需要每次处理请求都要重新初始化 PHP 环境，这样来给 Laravel 加速。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>安装 swoole<br> 可以参考</li><li>安装 swooletw/laravel-swoole<pre class=" language-bash"><code class="language-bash"> composer require swooletw/laravel-swoole</code></pre></li></ol><h1 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h1><pre><code>map $http_upgrade $connection_upgrade {    default upgrade;    &#39;&#39;      close;}server {    listen 80;    server_name your.domain.com;    root /path/to/laravel/public;    index index.php;    location = /index.php {        try_files /not_exists @swoole;    }    location / {        try_files $uri $uri/ @swoole;    }    location @swoole {        set $suffix &quot;&quot;;        if ($uri = /index.php) {            set $suffix &quot;/&quot;;        }        proxy_set_header Host $http_host;        proxy_set_header Scheme $scheme;        proxy_set_header SERVER_PORT $server_port;        proxy_set_header REMOTE_ADDR $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection $connection_upgrade;        proxy_pass http://127.0.0.1:1215$suffix;    }}</code></pre><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><pre class=" language-bash"><code class="language-bash">php artisan swoole:http start</code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>一开始直接测试 Laravel 开箱的欢迎页，多测几次，发现并发越来越低。<br>原因是压测的时候，每次访问都会生成新的 session 文件。<br>后来改成压测一个返回 { “hello”: “world” } 的请求，压测结果就正常了。</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><ul><li><p>未使用 swoole </p><pre><code>  wrk -t4 -c100 http://laravel.local/api/hello  Running 10s test @ http://laravel.local/api/hello    4 threads and 100 connections    Thread Stats   Avg      Stdev     Max   +/- Stdev      Latency   377.34ms   58.73ms 572.24ms   70.54%      Req/Sec    65.96     29.00   170.00     69.90%    2600 requests in 10.01s, 24.77MB read    Non-2xx or 3xx responses: 2455  Requests/sec:    259.70  Transfer/sec:      2.47MB</code></pre></li><li><p>使用 swoole</p><pre><code>  wrk -t4 -c100 http://laravel-swoole.local/api/hello  Running 10s test @ http://laravel-swoole.local/api/hello    4 threads and 100 connections    Thread Stats   Avg      Stdev     Max   +/- Stdev      Latency   117.40ms   23.28ms 237.19ms   92.03%      Req/Sec   212.69     34.59   252.00     83.00%    8478 requests in 10.01s, 84.90MB read    Non-2xx or 3xx responses: 8415  Requests/sec:    846.75  Transfer/sec:      8.48MB</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> swoole </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之树(一)</title>
      <link href="/2018/09/09/shu-ju-jie-gou-zhi-shu-yi/"/>
      <url>/2018/09/09/shu-ju-jie-gou-zhi-shu-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>树是 n (n &gt;= 0) 个有限数据元素的集合。</p><p><img src="/2018/09/09/shu-ju-jie-gou-zhi-shu-yi/tree.jpg" alt></p><p>任意一颗非空树 T 中，有以下特点：</p><ul><li>有且仅有一个特定的称为树根 (root) 的结点 (根结点无前驱结点)</li><li>当 n &gt; 1 时，除根结点之外的其余结点被分成 m (m &gt; 0) 个互不相交的集合 T1，T2，… ，Tm。其中，每一个集合 Ti (1 &lt;= i &lt;= m) 本身又是一棵树，并且称为根的子树。</li></ul><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ul><li>结点：树的结点包含一个数据元素及若干指向其子树的分支</li><li>结点的度：结点所拥有的子树数称为该结点的度，如 B 的度为 1，C 的度为 2</li><li>树的度：树中各结点度的最大值称为该树的度，如上图树的度为 2</li><li>叶子：度为零的结点称为叶子结点，如 D、E、F 是叶子结点</li><li>分支结点：度不为零的结点，如 B、C</li><li>兄弟结点：同一父亲结点下的子结点称为兄弟结点，如 B 和 C 是兄弟结点</li><li>层数：树的根结点的层数为 1，其余结点的层数等于它双亲结点的层数加 1</li><li>树的深度：树中结点的最大层数称为树的深度，如上图树的深度为 3</li><li>森林：零棵或有限棵互不相交的树的集合称为森林</li><li>有序树和无序树：如果树种结点的各子树从左到右是有次序的，则为有序树；否则，为无序树</li></ul><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>二叉树是有 n (n &gt;= 0) 个结点的有限集合，它有如下一些特点。</p><ul><li>该集合可以为空</li><li>该集合可以由一个根结点及两个不相交的子树组成非空树，这两个子树分别称为左子树和右子树</li><li>左子树和右子树同样又都是二叉树</li></ul><h2 id="基本形态"><a href="#基本形态" class="headerlink" title="基本形态"></a>基本形态</h2><p><img src="/2018/09/09/shu-ju-jie-gou-zhi-shu-yi/b-tree-type.jpg" alt></p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul><li>二叉树第i层上的结点数目最多为 2^{i-1} (i&gt;=1)</li><li>深度为 k 的二叉树至多有 2^{k}-1 个结点 (k&gt;=1)</li><li>包含n个结点的二叉树的高度至少为 log2 (n+1)</li></ul><p>二叉树中，设叶子结点数为 n0，度为 2 的结点数为 n2，则 n0 = n2 + 1</p><h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>定义：高度为h，并且有 2^{h} – 1 个结点的二叉树，被称为满二叉树。满二叉树的结点的度要么为 0（叶子结点），要么为 2（非叶子结点）。</p><p><img src="/2018/09/09/shu-ju-jie-gou-zhi-shu-yi/full-b-tree.jpg" alt></p><h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><p>定义：一棵二叉树中，只有最下面两层结点的度可以小于2，并且最下一层的叶结点集中在靠左的若干位置上。这样的二叉树称为完全二叉树。</p><p>特点：叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。显然，一棵满二叉树必定是一棵完全二叉树，而完全二叉树未必是满二叉树。</p><p><img src="/2018/09/09/shu-ju-jie-gou-zhi-shu-yi/fully-b-tree.jpg" alt></p><h2 id="结点代码"><a href="#结点代码" class="headerlink" title="结点代码"></a>结点代码</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">DataStructures<span class="token punctuation">\</span>Tree</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$left</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$right</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><p>递归过程为：若二叉树为空，则遍历结束。否则，访问根结点；先序遍历根结点的左子树；先序遍历根结点的右子树。</p><p>代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">DataStructures<span class="token punctuation">\</span>Tree</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * 先序遍历     * @param $node     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span><span class="token variable">$node</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$node</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">left</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>递归过程为：若二叉树为空，则遍历结束。否则，中序遍历根结点的左子树；访问根结点；中序遍历根结点的右子树。</p><p>代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">DataStructures<span class="token punctuation">\</span>Tree</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * 中序遍历     * @param $node     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">midOrder</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span><span class="token variable">$node</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$node</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">midOrder</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">left</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">midOrder</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>递归过程为：若二叉树为空，则遍历结束。否则，后序遍历根结点的左子树；后序遍历根结点的右子树；访问根结点。</p><p>代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">DataStructures<span class="token punctuation">\</span>Tree</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * 后序遍历     * @param $node     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span><span class="token variable">$node</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$node</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">left</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$node</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> data-structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 初探</title>
      <link href="/2018/08/26/swoole-chu-tan/"/>
      <url>/2018/08/26/swoole-chu-tan/</url>
      
        <content type="html"><![CDATA[<p>听说 swoole 很久了，一直没有用过，今天心血来潮跑了个 echo server，在此记录一下。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Swoole 是一个 PHP 扩展，可以使 PHP 开发人员可以编写高性能的异步并发 TCP、UDP、Unix Socket、HTTP，WebSocket 服务。更详细的介绍可以到<a href="https://www.swoole.com/" target="_blank" rel="noopener">官网</a>看一下。</p><h1 id="Echo-服务器"><a href="#Echo-服务器" class="headerlink" title="Echo 服务器"></a>Echo 服务器</h1><p>echo 服务器，服务端收到什么，就给客户端发送什么。</p><h2 id="安装-Swoole"><a href="#安装-Swoole" class="headerlink" title="安装 Swoole"></a>安装 Swoole</h2><pre class=" language-bash"><code class="language-bash">pecl <span class="token function">install</span> swoole</code></pre><h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Server</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$server</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个异步 Server 对象</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">swoole_server</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">9501</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置 swoole_server 运行时的各项参数</span>        <span class="token comment" spellcheck="true">// worker_num: 启动的 Worker 进程数</span>        <span class="token comment" spellcheck="true">// daemonize: 守护进程化。设置daemonize => 1时，程序将转入后台作为守护进程运行。</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string">'worker_num'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token string">'daemonize'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册 Server 的事件回调函数</span>        <span class="token comment" spellcheck="true">// Server 启动在主进程的主线程回调此函数</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'Start'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'onStart'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 有新的连接进入时，在 worker 进程中回调</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'Connect'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'onConnect'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 接收到数据时回调此函数，发生在worker进程中</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'Receive'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'onReceive'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TCP 客户端连接关闭后，在 worker 进程中回调此函数</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'Close'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'onClose'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动 Server</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Start\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onConnect</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">,</span> <span class="token variable">$fd</span><span class="token punctuation">,</span> <span class="token variable">$reactorId</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 向客户端发送数据</span>        <span class="token variable">$server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$fd</span><span class="token punctuation">,</span> <span class="token string">"Hello {$fd}!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>swoole_server <span class="token variable">$server</span><span class="token punctuation">,</span> <span class="token variable">$fd</span><span class="token punctuation">,</span> <span class="token variable">$reactorId</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Get Message From Client {$fd}:{$data}\n"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向客户端发送数据</span>        <span class="token variable">$server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$fd</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">,</span> <span class="token variable">$fd</span><span class="token punctuation">,</span> <span class="token variable">$reactorId</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Client {$fd} close connection\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$server</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构造函数注册的回调事件，可以在<a href="https://wiki.swoole.com/wiki/page/41.html" target="_blank" rel="noopener">这里</a>查到。</p><h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$client</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个 TCP Socket 客户端</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">swoole_client</span><span class="token punctuation">(</span><span class="token constant">SWOOLE_SOCK_TCP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 连接到远程服务器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">client</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">9501</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"Error: {$this->client->errMsg}[{$this->client->errCode}]\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 输出 "请输入消息 Please input msg：" 到控制台</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token constant">STDOUT</span><span class="token punctuation">,</span> <span class="token string">"请输入消息 Please input msg："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从控制台读取输入</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token constant">STDIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送数据到远程服务器</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">client</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从服务器端接收数据</span>        <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">client</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"Get Message From Server:{$message}\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$client</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h2><ul><li>创建一个 Server.php，并输入服务端的代码</li><li>创建一个 Client.php，并输入客户端的代码</li><li>在一个控制台执行 php Server.php 运行服务端</li><li>在另一个控制台执行 php Client.php 运行客户端，并输入任何字符</li></ul><p>运行截图如下：</p><p>服务端<br><img src="/2018/08/26/swoole-chu-tan/server.png" alt></p><p>客户端<br><img src="/2018/08/26/swoole-chu-tan/client.png" alt></p><h1 id="Swoole-相关知识"><a href="#Swoole-相关知识" class="headerlink" title="Swoole 相关知识"></a>Swoole 相关知识</h1><h2 id="进程-线程结构"><a href="#进程-线程结构" class="headerlink" title="进程 / 线程结构"></a>进程 / 线程结构</h2><p>Swoole 是一个多进程模式的框架（可以类比Nginx的进程模型），当启动一个 Swoole 应用时，一共会创建 2 + n + m 个进程，其中 n 为 Worker 进程数，m 为 TaskWorker 进程数，2 为一个 Master 进程和一个 Manager 进程。Reactor 线程实际运行 epoll 实例，用于 accept 客户端连接以及接收客户端数据；Manager 进程为管理进程，该进程的作用是创建、管理所有的 Worker 进程和 TaskWorker 进程。</p><p><img src="/2018/08/26/swoole-chu-tan/swoole.jpg" alt></p><h2 id="Reactor、Worker、TaskWorker"><a href="#Reactor、Worker、TaskWorker" class="headerlink" title="Reactor、Worker、TaskWorker"></a>Reactor、Worker、TaskWorker</h2><h3 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h3><ul><li>负责维护客户端 TCP 连接、处理网络 IO、处理协议、收发数据</li><li>完全是异步非阻塞的模式</li><li>除 Start / Shudown 事件回调外，不执行任何 PHP 代码</li><li>将 TCP 客户端发来的数据缓冲、拼接、拆分成完整的一个请求数据包</li><li>Reactor 以多线程的方式运行</li></ul><h3 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h3><ul><li>接受由 Reactor 线程投递的请求数据包，并执行 PHP 回调函数处理数据</li><li>生成响应数据并发给 Reactor 线程，由 Reactor 线程发送给 TCP 客户端</li><li>可以是异步非阻塞模式，也可以是同步阻塞模式</li><li>Worker 以多进程的方式运行</li></ul><h3 id="TaskWorker"><a href="#TaskWorker" class="headerlink" title="TaskWorker"></a>TaskWorker</h3><ul><li>接受由 Worker 进程通过 swoole_server-&gt;task/taskwait 方法投递的任务</li><li>处理任务，并将结果数据返回 (swoole_server-&gt;finish) 给 Worker 进程</li><li>完全是同步阻塞模式</li><li>TaskWorker 以多进程的方式运行</li></ul><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>可以理解为 Reactor 就是 nginx，Worker 就是 php-fpm 。Reactor 线程异步并行地处理网络请求，然后再转发给 Worker 进程中去处理。Reactor 和 Worker 间通过 UnixSocket 进行通信。</p><p>一个更通俗的比喻，假设 Server 就是一个工厂，那 Reactor 就是销售，接受客户订单。而 Worker 就是工人，当销售接到订单后，Worker 去工作生产出客户要的东西。而 TaskWorker 可以理解为行政人员，可以帮助 Worker 干些杂事，让 Worker 专心工作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Docker 从零搭建 LNMP 环境</title>
      <link href="/2018/08/11/cong-ling-kai-shi-da-jian/"/>
      <url>/2018/08/11/cong-ling-kai-shi-da-jian/</url>
      
        <content type="html"><![CDATA[<p>上周有位同事让我分享一下怎么用 docker，由于之前一直在用 <a href="http://laradock.io/" target="_blank" rel="noopener">laradock</a> ，还没试过基于 Docker 搭建 LNMP 环境，今天借着做作业的机会来实践总结一下。</p><h1 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h1><p>参考<a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="noopener">这篇文章</a>的定义：Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。<br><strong>简单粗暴来理解的话，可以把 Docker 理解成虚拟机，</strong> 但实际上却有很大区别。</p><p>Docker 和虚拟机的对比如下图：<br><a href="https://i.loli.net/2018/08/11/5b6eb221c261b.jpeg" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/11/5b6eb221c261b.jpeg" alt="WechatIMG347.jpeg"></a></p><p>从上图可以看出，我们把 app 和 app 的依赖打包进容器，多个容器共用宿主机的资源，并且在运行的时候相互隔离。虚拟机也是运行在宿主机上，一台宿主机也可以运行多个虚拟机，但是每个虚拟机都要重新装一个操作系统。<br>相比之下，容器相当于一个运行在操作系统上的进程，所占用的资源比虚拟机要少很多。所以容器比虚拟机轻量很多且高效很多。</p><h1 id="Docker-基本操作"><a href="#Docker-基本操作" class="headerlink" title="Docker 基本操作"></a>Docker 基本操作</h1><h2 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h2><p>使用阿里云的镜像加速器，配置文档可参考<a href="https://yq.aliyun.com/articles/29941" target="_blank" rel="noopener">《Docker 镜像加速器》</a>。</p><h2 id="hello-docker"><a href="#hello-docker" class="headerlink" title="hello docker"></a>hello docker</h2><pre class=" language-bash"><code class="language-bash">docker run ubuntu <span class="token keyword">echo</span> hello docker</code></pre><p>执行结果如图：</p><p><a href="https://i.loli.net/2018/08/11/5b6ed93ae6817.jpeg" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/11/5b6ed93ae6817.jpeg" alt="docker-hello.jpeg"></a></p><p>命令解释：</p><ul><li>docker: docker 命令</li><li>run: 运行某个容器</li><li>ubuntu: 指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li><li>echo hello docker: 在启动的容器里面执行的命令</li></ul><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><p>这里只列一些个人常用的命令，更详细的命令说明可以参考官网或者<a href="http://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">这里</a>。</p><ul><li><p>run: 创建一个新的容器并运行一个命令<br>  语法: docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p><p>  OPTIONS:<br>  -d: 后台运行容器，并返回容器ID；<br>  -i: 以交互模式运行容器，通常与 -t 同时使用；<br>  -p: 端口映射，格式为：主机(宿主)端口:容器端口<br>  -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>  -v: 绑定一个挂在分区</p></li><li><p>start/stop/restart: 启动/停止/重新启动 一个容器</p></li><li>rm: 删除一个或多少容器</li><li>exec: 在运行的容器中执行命令</li><li>ps: 列出容器</li><li>commit: 从容器创建一个新的镜像</li><li>cp: 用于容器与主机之间的数据拷贝</li><li>images: 列出本地镜像</li><li>rmi: 删除本地一个或多少镜像</li><li>build: 用于使用 Dockerfile 创建镜像</li></ul><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>Docker 可以从一个名为 Dockerfile 的文件读取一系列指令来自动构建镜像。Dockerfile 文件包含了所有构建镜像的命令。用户通过 docker build 命令可以自动地构建镜像。<br>Dockerfile 的语法可以参考<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">官方文档</a>。</p><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p>Docker Compose 是一个用户定义和运行多个容器的 Docker 应用程序。在 Compose 中你可以使用 YAML 文件来配置你的应用服务。然后，只需要一个简单的命令，就可以创建并启动你配置的所有服务。<br>使用 Compose 基本会有如下三步流程：</p><ol><li>在 Dockfile 中定义你的应用环境，使其可以在任何地方复制。</li><li>在 docker-compose.yml 中定义组成应用程序的服务，以便它们可以在隔离的环境中一起运行。</li><li>最后，运行dcoker-compose up，Compose 将启动并运行整个应用程序。</li></ol><p>详细的说明可以参考<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">官方文档</a></p><h1 id="构建-LNMP"><a href="#构建-LNMP" class="headerlink" title="构建 LNMP"></a>构建 LNMP</h1><p>我们可以在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a> 搜索到常用的镜像，如 php-fpm、nginx、mysql 等，在编写 Dockfile 的时候，可以参考每个镜像的说明。</p><h2 id="workspace"><a href="#workspace" class="headerlink" title="workspace"></a>workspace</h2><p>Dockerfile 如下：</p><pre><code># 基于 docker hub 的 php:7.2-fpm 的镜像FROM php:7.2-fpm# 维护者信息LABEL maintainer=&quot;Wilson.Li &lt;494747693@qq.com&gt;&quot;# 安装所需的依赖RUN apt-get update &amp;&amp; apt-get install -y \        libfreetype6-dev \        libjpeg62-turbo-dev \        libpng-dev \    &amp;&amp; docker-php-ext-install -j$(nproc) iconv \    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \    &amp;&amp; docker-php-ext-install -j$(nproc) gd \    &amp;&amp; docker-php-ext-install pdo \    &amp;&amp; docker-php-ext-install pdo_mysql# 设置容器的工作目录WORKDIR /var/www</code></pre><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>Dockerfile 如下：</p><pre><code># 基于 docker hub 的 nginx:alpine 镜像FROM nginx:alpine# 维护者信息LABEL maintainer=&quot;Wilson.Li &lt;494747693@qq.com&gt;&quot;# 添加虚拟主机配置ADD default.conf /etc/nginx/conf.d/default.conf# 指定容器的工作目录WORKDIR /var/www</code></pre><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>由于我们没有对 mysql 的镜像做任何修改，所以可以直接在 docker-compose.yml 中用 image 标签来指定。</p><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 指定使用的 docker-compose 的版本</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 配置 workspace</span>  <span class="token key atrule">workspace</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置编译相关的信息</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 指定读取 Dockfile 的目录</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./workspace    <span class="token comment" spellcheck="true"># 配置容器工作目录</span>    <span class="token key atrule">working_dir</span><span class="token punctuation">:</span> /var/www    <span class="token comment" spellcheck="true"># 配置挂在的目录，./code 是宿主机的路径，/var/www 是容器中的路径</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./code<span class="token punctuation">:</span>/var/www    <span class="token comment" spellcheck="true"># 配置所需的环节变量</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"DB_PORT=3306"</span>      <span class="token punctuation">-</span> <span class="token string">"DB_HOST=mysql"</span>  <span class="token comment" spellcheck="true"># 配置 nginx</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./nginx    <span class="token key atrule">working_dir</span><span class="token punctuation">:</span> /var/www    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./code<span class="token punctuation">:</span>/var/www    <span class="token comment" spellcheck="true"># 配置端口映射信息</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8180<span class="token punctuation">:</span><span class="token number">80</span>  <span class="token comment" spellcheck="true"># 配置 mysql 数据库</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 直接使用 mysql:5.7 的镜像</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/mysql<span class="token punctuation">:</span>/var/lib/mysql    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"MYSQL_DATABASE=homestead"</span>      <span class="token punctuation">-</span> <span class="token string">"MYSQL_USER=homestead"</span>      <span class="token punctuation">-</span> <span class="token string">"MYSQL_PASSWORD=secret"</span>      <span class="token punctuation">-</span> <span class="token string">"MYSQL_ROOT_PASSWORD=secret"</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span></code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code>.├── code│   └── laravel├── data│   └── mysql├── docker-compose.yml├── nginx│   ├── Dockerfile│   └── default.conf└── workspace    └── Dockerfile</code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在 docker-compose.yml 同级目录输入以下命令：</p><pre><code>docker-compose up -d</code></pre><p>-d 表示在后台运行</p><h2 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h2><pre><code>docker-compose ps</code></pre><p>运行状态如下图：<br><a href="https://i.loli.net/2018/08/13/5b706285cfd97.jpeg" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/08/13/5b706285cfd97.jpeg" alt="WechatIMG349.jpeg"></a></p><h2 id="进入容器命令"><a href="#进入容器命令" class="headerlink" title="进入容器命令"></a>进入容器命令</h2><pre><code>docker-compose exec workspace bash</code></pre><h2 id="页面访问"><a href="#页面访问" class="headerlink" title="页面访问"></a>页面访问</h2><p>因为我们在 docker-compose.yml 配置的 nginx 端口映射为 8180:80，所以我们访问的网址为: <a href="http://localhost:8180" target="_blank" rel="noopener">http://localhost:8180</a><br>我在 mac 上可以正常访问，访问结果就不截图了。</p><h2 id="数据库访问"><a href="#数据库访问" class="headerlink" title="数据库访问"></a>数据库访问</h2><p>由于我们在 docker-compose.yml 配置 workspace 了环境变量</p><pre><code>environment:  - &quot;DB_PORT=3306&quot;  - &quot;DB_HOST=mysql&quot;</code></pre><p>所以，我们在 laravel 的 .env 中，把 DB_HOST 配置为 mysql 即可访问数据库。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> lnmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊私链搭建</title>
      <link href="/2018/08/06/yi-tai-fang-si-lian-da-jian/"/>
      <url>/2018/08/06/yi-tai-fang-si-lian-da-jian/</url>
      
        <content type="html"><![CDATA[<p>以太坊钱包目前主要有两个，geth 和 parity。这里我们以 geth 为例子。</p><h1 id="安装-Geth"><a href="#安装-Geth" class="headerlink" title="安装 Geth"></a>安装 Geth</h1><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><pre class=" language-bash"><code class="language-bash">brew tap ethereum/ethereumbrew <span class="token function">install</span> ethereum</code></pre><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common<span class="token function">sudo</span> add-apt-repository -y ppa:ethereum/ethereum<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ethereumsudo <span class="token function">apt-get</span> instal</code></pre><h1 id="创建创世块"><a href="#创建创世块" class="headerlink" title="创建创世块"></a>创建创世块</h1><h2 id="定义创世块配置"><a href="#定义创世块配置" class="headerlink" title="定义创世块配置"></a>定义创世块配置</h2><p>创建一个名为 genesis.json 的文件，文件内容如下：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"chainId"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>        <span class="token property">"homesteadBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"eip155Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"eip158Block"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"alloc"</span>      <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"coinbase"</span>   <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"difficulty"</span> <span class="token operator">:</span> <span class="token string">"0x4"</span><span class="token punctuation">,</span>  <span class="token property">"extraData"</span>  <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"gasLimit"</span>   <span class="token operator">:</span> <span class="token string">"0x2fefd8"</span><span class="token punctuation">,</span>  <span class="token property">"nonce"</span>      <span class="token operator">:</span> <span class="token string">"0x0000000000000042"</span><span class="token punctuation">,</span>  <span class="token property">"mixhash"</span>    <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"parentHash"</span> <span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"timestamp"</span>  <span class="token operator">:</span> <span class="token string">"0x00"</span><span class="token punctuation">}</span></code></pre><p>以上配置文件中，</p><ul><li><p>chainId<br>  标识当前网络，raw transaction 的参数之一。<br>  公链主要有以下几种：</p><pre><code>&quot;1&quot;: Ethereum Mainnet&quot;2&quot;: Morden Testnet (deprecated)&quot;3&quot;: Ropsten Testnet&quot;4&quot;: Rinkeby Testnet&quot;42&quot;: Kovan Testnet</code></pre><p>  因为我们是私链，所以定义了一个跟上面 5 个配置不一样的数字</p></li><li><p>alloc<br>  预先给某些账号充值 eth<br>  配置方式如下：</p><pre class=" language-json"><code class="language-json"><span class="token property">"alloc"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"0x0000000000000000000000000000000000000001"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"balance"</span><span class="token operator">:</span> <span class="token string">"111111111"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"0x0000000000000000000000000000000000000002"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"balance"</span><span class="token operator">:</span> <span class="token string">"222222222"</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>coinbase<br>  挖矿收益账号</p></li><li><p>difficulty<br>  挖矿难度</p></li></ul><h2 id="初始化创世块"><a href="#初始化创世块" class="headerlink" title="初始化创世块"></a>初始化创世块</h2><p>在控制台输入以下命令：</p><pre class=" language-bash"><code class="language-bash">geth init genesis.json --datadir <span class="token string">"/Users/lidelin/work/blockchain/ethereum/node1"</span></code></pre><p>–datadir 参数用来指定存放数据的目录。</p><h1 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>创建了创世块后，可以输以下命令来启动</p><pre class=" language-bash"><code class="language-bash">geth --networkid 123 --datadir <span class="token string">"/Users/lidelin/work/blockchain/ethereum/node1"</span> console</code></pre><p>console 表示启动命令行。</p><h2 id="创建以太坊账号"><a href="#创建以太坊账号" class="headerlink" title="创建以太坊账号"></a>创建以太坊账号</h2><pre class=" language-bash"><code class="language-bash">personal.newAccount<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span></code></pre><h2 id="设置挖矿收益账号"><a href="#设置挖矿收益账号" class="headerlink" title="设置挖矿收益账号"></a>设置挖矿收益账号</h2><pre class=" language-bash"><code class="language-bash">miner.setEtherbase<span class="token punctuation">(</span><span class="token string">"0x6b26ff6fa4a85e612158438fe1ed2c613aa6dfe0"</span><span class="token punctuation">)</span></code></pre><h2 id="查询账号余额"><a href="#查询账号余额" class="headerlink" title="查询账号余额"></a>查询账号余额</h2><pre class=" language-bash"><code class="language-bash">web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span><span class="token string">"0x6b26ff6fa4a85e612158438fe1ed2c613aa6dfe0"</span><span class="token punctuation">)</span>,<span class="token string">"ether"</span><span class="token punctuation">)</span></code></pre><p>可以看到当前 0x6b26ff6fa4a85e612158438fe1ed2c613aa6dfe0 的余额为 0。</p><h2 id="开始挖矿"><a href="#开始挖矿" class="headerlink" title="开始挖矿"></a>开始挖矿</h2><pre class=" language-bash"><code class="language-bash">miner.start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>当出现</p><pre><code>INFO [08-06|01:56:51] Successfully sealed new block            number=6 hash=f05319…22410dINFO [08-06|01:56:51] 🔗 block reached canonical chain          number=1 hash=ec8c28…b42fe3INFO [08-06|01:56:51] 🔨 mined potential block                  number=6 hash=f05319…22410dINFO [08-06|01:56:51] Commit new mining work                   number=7 txs=0 uncles=0 elapsed=257.575µsINFO [08-06|01:56:51] Successfully sealed new block            number=7 hash=59ce4d…b8b6e2INFO [08-06|01:56:51] 🔗 block reached canonical chain          number=2 hash=b11c41…45a91eINFO [08-06|01:56:51] 🔨 mined potential block                  number=7 hash=59ce4d…b8b6e2INFO [08-06|01:56:51] Commit new mining work                   number=8 txs=0 uncles=0 elapsed=1.432msINFO [08-06|01:56:52] Successfully sealed new block            number=8 hash=5a7c7f…6e1dabINFO [08-06|01:56:52] 🔗 block reached canonical chain          number=3 hash=6b4b4f…0f53d9INFO [08-06|01:56:52] 🔨 mined potential block                  number=8 hash=5a7c7f…6e1dabINFO [08-06|01:56:52] Commit new mining work                   number=9 txs=0 uncles=0 elapsed=275.508µs</code></pre><p>表示开始挖矿。<br>此时再查账号余额，可以发现值不为 0 了。</p><h1 id="节点同步"><a href="#节点同步" class="headerlink" title="节点同步"></a>节点同步</h1><p>数据目录路径：<br>节点 1 ：/Users/lidelin/work/blockchain/ethereum/node1<br>节点 2 ：/Users/lidelin/work/blockchain/ethereum/node2</p><p>我们把正在挖矿的终端叫终端 A，<br>新开一个终端，叫终端 B，输以下命令：</p><pre class=" language-bash"><code class="language-bash">geth init genesis.json --datadir <span class="token string">"/Users/lidelin/work/blockchain/ethereum/node2"</span>geth --networkid 123 --datadir <span class="token string">"/Users/lidelin/work/blockchain/ethereum/node2"</span> --port 30304 console</code></pre><ul><li>创建创世区块用的 genesis.json 和刚才的一样</li><li>加 –port 30304 是 30303 已经被终端 A 挖矿的那个节点用了</li></ul><p>在终端 A 输以下命令查看节点信息</p><pre class=" language-bash"><code class="language-bash">admin.nodeInfo.enode</code></pre><p>节点信息如下所示</p><pre><code>&quot;enode://ce966c1a9db2a15ff6f6eebc0e53790ed0ec8edbbb45a50c59fd2f6f9da68665259f98a932732301513c25389c64621ac3aae582fba6f4c6b0821d7aa9867a63@10.1.1.67:30303&quot;</code></pre><p>在终端 B 输以下命令添加同步节点：</p><pre class=" language-bash"><code class="language-bash">admin.addPeer<span class="token punctuation">(</span><span class="token string">"enode://ce966c1a9db2a15ff6f6eebc0e53790ed0ec8edbbb45a50c59fd2f6f9da68665259f98a932732301513c25389c64621ac3aae582fba6f4c6b0821d7aa9867a63@10.1.1.67:30303"</span><span class="token punctuation">)</span></code></pre><p>当出现以下 log 时表示开始同步节点数据</p><pre><code>INFO [08-06|02:15:33] Imported new chain segment               blocks=1  txs=0 mgas=0.000 elapsed=9.969ms   mgasps=0.000 number=57 hash=96fcad…29db76INFO [08-06|02:15:39] Imported new chain segment               blocks=1  txs=0 mgas=0.000 elapsed=10.226ms  mgasps=0.000 number=58 hash=5fcaba…77a450INFO [08-06|02:15:40] Imported new chain segment               blocks=1  txs=0 mgas=0.000 elapsed=8.901ms   mgasps=0.000 number=59 hash=adc477…36bfa8</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之用户认证系统</title>
      <link href="/2018/07/29/shen-ru-laravel-zhi-yong-hu-ren-zheng-xi-tong/"/>
      <url>/2018/07/29/shen-ru-laravel-zhi-yong-hu-ren-zheng-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>Laravel 的用户认证系统是由“守卫”和“提供者”组成的。<br>守卫定义了该如何认证每个请求的用户。例如，Laravel 的 session 守卫用 session 存储和 cookies 来维护状态。<br>提供者定义了怎样从持久化的存储中检索用户。Laravel 支持从 Eloquent 和查询构造器检索用户。</p><h1 id="用户认证系统主要的-Interface"><a href="#用户认证系统主要的-Interface" class="headerlink" title="用户认证系统主要的 Interface"></a>用户认证系统主要的 Interface</h1><p>主要的接口有以下几个：</p><ul><li>Illuminate\Contracts\Auth\Guard</li><li>Illuminate\Contracts\Auth\UserProvider</li></ul><h2 id="Guard"><a href="#Guard" class="headerlink" title="Guard"></a>Guard</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Guard</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 判断当前用户是否已经认证过     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断当前用户是不是游客(即没登录)     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取当前已经认证的用户     * @return \Illuminate\Contracts\Auth\Authenticatable|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取当前已经认证的用户的 ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 验证一个用户的凭证     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$credentials</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置认证的用户     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setUser</span><span class="token punctuation">(</span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="UserProvider"><a href="#UserProvider" class="headerlink" title="UserProvider"></a>UserProvider</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">UserProvider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过用户的唯一标识符检索用户     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveById</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过用户的唯一标识符和“记住我”令牌来检索用户     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByToken</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 更新某个用户“记住我”的令牌     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">updateRememberToken</span><span class="token punctuation">(</span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过凭证检索用户     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByCredentials</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 验证用户提供的凭据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">validateCredentials</span><span class="token punctuation">(</span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Laravel-自带的-Guard-和-UserProvider-实现"><a href="#Laravel-自带的-Guard-和-UserProvider-实现" class="headerlink" title="Laravel 自带的 Guard 和 UserProvider 实现"></a>Laravel 自带的 Guard 和 UserProvider 实现</h1><h2 id="Guard-1"><a href="#Guard-1" class="headerlink" title="Guard"></a>Guard</h2><p><img src="https://i.loli.net/2018/07/30/5b5df382d00c5.jpeg" alt></p><h2 id="UserProvider-1"><a href="#UserProvider-1" class="headerlink" title="UserProvider"></a>UserProvider</h2><p><img src="https://i.loli.net/2018/07/30/5b5df3a3f2db8.jpeg" alt></p><h1 id="用户认证系统的中间件"><a href="#用户认证系统的中间件" class="headerlink" title="用户认证系统的中间件"></a>用户认证系统的中间件</h1><p>Laravel 的用户认证是放在中间件处理的。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Middleware</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>AuthenticationException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Factory</span> <span class="token keyword">as</span> Auth<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Authenticate</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The authentication factory instance.     *     * @var \Illuminate\Contracts\Auth\Factory     */</span>    <span class="token keyword">protected</span> <span class="token variable">$auth</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Create a new middleware instance.     *     * @param  \Illuminate\Contracts\Auth\Factory  $auth     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Auth <span class="token variable">$auth</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">auth</span> <span class="token operator">=</span> <span class="token variable">$auth</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Handle an incoming request.     *     * @param  \Illuminate\Http\Request  $request     * @param  \Closure  $next     * @param  string[]  ...$guards     * @return mixed     *     * @throws \Illuminate\Auth\AuthenticationException     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> Closure <span class="token variable">$next</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$guards</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token variable">$guards</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Determine if the user is logged in to any of the given guards.     *     * @param  array  $guards     * @return void     *     * @throws \Illuminate\Auth\AuthenticationException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$guards</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$guards</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">auth</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$guards</span> <span class="token keyword">as</span> <span class="token variable">$guard</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">auth</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">guard</span><span class="token punctuation">(</span><span class="token variable">$guard</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">auth</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldUse</span><span class="token punctuation">(</span><span class="token variable">$guard</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">(</span><span class="token string">'Unauthenticated.'</span><span class="token punctuation">,</span> <span class="token variable">$guards</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终就是调用守卫的 authenticate() 来认证并获取用户。</p><h1 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h1><p>用户认证系统主要有以下的角色：</p><ul><li>服务提供者： Illuminate\Auth\AuthServiceProvider，主要把用户认证系统所需的实现绑定到容器，负责和 Laravel 建立连接</li><li>管理员：Illuminate\Auth\AuthManager，负责管理守卫和提供者</li><li>守卫，负责认证用户</li><li>用户提供者，负责检索用户并提供认证过的用户的信息</li></ul><h2 id="用户认证系统的服务提供者"><a href="#用户认证系统的服务提供者" class="headerlink" title="用户认证系统的服务提供者"></a>用户认证系统的服务提供者</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">AuthServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Register the service provider.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerUserResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerAccessGate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerRequestRebindHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>$this-&gt;registerAuthenticator()，注册认证者，即认证系统中的管理员；$this-&gt;registerUserResolver()，注册用户解析器；$this-&gt;registerAccessGate()，属于权限验证那部分的，这里暂不讨论；$this-&gt;registerRequestRebindHandler()，给 Request 注册用户解析器。</p><h2 id="认证系统的管理员"><a href="#认证系统的管理员" class="headerlink" title="认证系统的管理员"></a>认证系统的管理员</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">InvalidArgumentException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Factory</span> <span class="token keyword">as</span> FactoryContract<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AuthManager</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryContract</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">CreatesUserProviders</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Attempt to get the guard from the local cache.     *     * @param  string  $name     * @return \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">guard</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$name</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDefaultDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">guards</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">guards</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Resolve the given guard.     *     * @param  string  $name     * @return \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard     *     * @throws \InvalidArgumentException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string">"Auth guard [{$name}] is not defined."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">customCreators</span><span class="token punctuation">[</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'driver'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">callCustomCreator</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$driverMethod</span> <span class="token operator">=</span> <span class="token string">'create'</span><span class="token punctuation">.</span><span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'driver'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'Driver'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$driverMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$driverMethod</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string">"Auth driver [{$config['driver']}] for guard [{$name}] is not defined."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createSessionDriver</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Create a token based authentication guard.     *     * @param  string  $name     * @param  array  $config     * @return \Illuminate\Auth\TokenGuard     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createTokenDriver</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The token guard implements a basic API token based guard implementation</span>        <span class="token comment" spellcheck="true">// that takes an API token field from the request and matches it to the</span>        <span class="token comment" spellcheck="true">// user in the database or another persistence layer where users are.</span>        <span class="token variable">$guard</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TokenGuard</span><span class="token punctuation">(</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createUserProvider</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'provider'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">[</span><span class="token string">'request'</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token variable">$guard</span><span class="token punctuation">,</span> <span class="token string">'setRequest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$guard</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Register a custom driver creator Closure.     *     * @param  string  $driver     * @param  \Closure  $callback     * @return $this     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token variable">$driver</span><span class="token punctuation">,</span> Closure <span class="token variable">$callback</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">customCreators</span><span class="token punctuation">[</span><span class="token variable">$driver</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$callback</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createUserProvider</span><span class="token punctuation">(</span><span class="token variable">$provider</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$config</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getProviderConfiguration</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">customProviderCreators</span><span class="token punctuation">[</span><span class="token variable">$driver</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'driver'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">customProviderCreators</span><span class="token punctuation">[</span><span class="token variable">$driver</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">,</span> <span class="token variable">$config</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$driver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'database'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createDatabaseProvider</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'eloquent'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createEloquentProvider</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"Authentication user provider [{$driver}] is not defined."</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createEloquentProvider</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EloquentUserProvider</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过 guard($name = null) 可以获取守卫，当在 $this-&gt;guards 没找到时，会调用 resolve($name) 来解析。对于 Laravel 自带的守卫，会调用 createSessionDriver 和 createTokenDriver 来创建，最终就是创建 Illuminate\Auth\TokenGuard 和 Illuminate\Auth\SessionGuard，并绑定到 Request。</p><p>在创建守卫时，要先创建用户提供者。对于 Laravel 自带的用户提供者，会调用 createDatabaseProvider 和 createEloquentProvider 来创建，最终就是创建 Illuminate\Auth\EloquentUserProvider 和 Illuminate\Auth\DatabaseUserProvider。</p><h2 id="守卫"><a href="#守卫" class="headerlink" title="守卫"></a>守卫</h2><p>Laravel 提供了 RequestGuard、TokenGuard 和 SessionGuard，我们以 TokenGuard 为例。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Guard</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>UserProvider</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TokenGuard</span> <span class="token keyword">implements</span> <span class="token class-name">Guard</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">GuardHelpers</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$user</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If we've already retrieved the user for the current request we can just</span>        <span class="token comment" spellcheck="true">// return it back immediately. We do not want to fetch the user data on</span>        <span class="token comment" spellcheck="true">// every call to this method because that would be tremendously slow.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTokenForRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">provider</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">retrieveByCredentials</span><span class="token punctuation">(</span>                <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">storageKey</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$token</span><span class="token punctuation">]</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们通过中间件的代码可以知道，最终会调用守卫的 authenticate() 来对用户认证。从上面的代码可以看出，authenticate() 会调用 user() 方法来获取用户，最终就是从用户提供者获取用户。如果能获取到用户，认证就通过；否则，认证失败。</p><h2 id="用户提供者"><a href="#用户提供者" class="headerlink" title="用户提供者"></a>用户提供者</h2><p>Laravel 提供了 DatabaseUserProvider 和 EloquentUserProvider，我们来看看 EloquentUserProvider 的代码。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">EloquentUserProvider</span> <span class="token keyword">implements</span> <span class="token class-name">UserProvider</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Retrieve a user by their unique identifier.     *     * @param  mixed  $identifier     * @return \Illuminate\Contracts\Auth\Authenticatable|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveById</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAuthIdentifierName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$identifier</span><span class="token punctuation">)</span>            <span class="token operator">-</span><span class="token operator">></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieve a user by their unique identifier and "remember me" token.     *     * @param  mixed  $identifier     * @param  string  $token     * @return \Illuminate\Contracts\Auth\Authenticatable|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByToken</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAuthIdentifierName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$identifier</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$rememberToken</span> <span class="token operator">=</span> <span class="token variable">$model</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRememberToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$rememberToken</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hash_equals</span><span class="token punctuation">(</span><span class="token variable">$rememberToken</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$model</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Update the "remember me" token for the given user in storage.     *     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user     * @param  string  $token     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">updateRememberToken</span><span class="token punctuation">(</span>UserContract <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRememberToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$timestamps</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">timestamps</span><span class="token punctuation">;</span>        <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">timestamps</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">timestamps</span> <span class="token operator">=</span> <span class="token variable">$timestamps</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieve a user by the given credentials.     *     * @param  array  $credentials     * @return \Illuminate\Contracts\Auth\Authenticatable|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByCredentials</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">)</span> <span class="token operator">||</span>           <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// First we will add each credential element to the query as a where clause.</span>        <span class="token comment" spellcheck="true">// Then we can execute the query and, if we found a user, return it in a</span>        <span class="token comment" spellcheck="true">// Eloquent User "model" that will be utilized by the Guard instances.</span>        <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$credentials</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token variable">$value</span> <span class="token keyword">instanceof</span> <span class="token class-name">Arrayable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Validate a user against the given credentials.     *     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user     * @param  array  $credentials     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">validateCredentials</span><span class="token punctuation">(</span>UserContract <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$plain</span> <span class="token operator">=</span> <span class="token variable">$credentials</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hasher</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$plain</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAuthPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Create a new instance of the model.     *     * @return \Illuminate\Database\Eloquent\Model     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">.</span><span class="token function">ltrim</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span><span class="token punctuation">,</span> <span class="token string">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token variable">$class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>通过上面的代码我们可以看到，用户提供者的实现跟我们平时使用 Eloquent 查询数据相差不多，主要通过用户 ID、token 或者 email 和密码来查询用户信息。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) 用 Nginx 实现 Http 负载均衡器</title>
      <link href="/2018/07/21/yi-yong-nginx-shi-xian-http-fu-zai-jun-heng-qi/"/>
      <url>/2018/07/21/yi-yong-nginx-shi-xian-http-fu-zai-jun-heng-qi/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="http://nginx.org/en/docs/http/load_balancing.html" target="_blank" rel="noopener">Using nginx as HTTP load balancer</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>负载均衡，是用来优化资源使用、使吞吐率最大化、降低延时和保证系统容错的一种通用技术。nginx 可以作为一个非常高效的 HTTP 负载均衡器，将流量分配给多个应用服务器，同时也可以提高 Web 应用程序的性能、可扩展性和可靠性。</p><h1 id="负载均衡机制"><a href="#负载均衡机制" class="headerlink" title="负载均衡机制"></a>负载均衡机制</h1><p>nginx 支持以下几种负载均衡机制：</p><ul><li>轮询调度 —— 请求以轮询调度的方式被分发到服务器</li><li>最少连接 —— 下个请求被分发到连接活跃数最少的服务器</li><li>IP 地址哈希 —— 使用 IP 地址的哈希值来决定把请求分发到哪个服务器</li></ul><h1 id="默认的负载均衡配置"><a href="#默认的负载均衡配置" class="headerlink" title="默认的负载均衡配置"></a>默认的负载均衡配置</h1><p>nginx 最简单的负载均衡配置如下：</p><pre><code>http {    upstream myapp1 {        server srv1.example.com;        server srv2.example.com;        server srv3.example.com;    }    server {        listen 80;        location / {            proxy_pass http://myapp1;        }    }}</code></pre><p>在上面的例子中，有 3 个同样的程序实例运行在 srv1-srv3。当没有具体配置负载均衡机制的时候，默认为轮询调度算法。所有请求被代理到 myapp1 服务器组，然后 nginx 使用负载均衡的方式来分发请求。<br>nginx 为 HTTP、HTTPS、FastCGI、uwsgi、SCGI、memcached 和 gRPC 实现了反向代理负载均衡。<br>如果把负载均衡从 HTTP 改成 HTTPS，只要用“https”协议即可。<br>如果要架设 FastCGI、uwsgi、SCGI、memcached 或者 gRPC 的负载均衡, 可以分别用 fastcgi_pass, uwsgi_pass, scgi_pass, memcached_pass, and grpc_pass 指令。</p><h1 id="最少连接负载均衡"><a href="#最少连接负载均衡" class="headerlink" title="最少连接负载均衡"></a>最少连接负载均衡</h1><p>另一种负载均衡机制是最少连接。对于某些需要花比较长时间才能完成的请求，最少连接机制可以让程序实例的负载更加均衡。<br>使用最少连接这种负载均衡机制时，nginx 会尝试不让服务器负载过高，当有新请求时，会把请求分发给负载相对低的服务器。<br>在配置文件服务器组中，使用 least_conn 指令可以开启最少连接负载均衡机制：</p><pre><code>upstream myapp1 {    least_conn;    server srv1.example.com;    server srv2.example.com;    server srv3.example.com;}</code></pre><h1 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h1><p>注意，使用轮询调度和最少连接负载均衡机制的时候，每个客户端的请求都有可能被分发到不同的服务器，无法保证同一个客户端的请求会被分发到同一台服务器。<br>如果需要把一个客户端绑定到一台特定的服务器，也就是说，让客户端的会话保持在一台固定的服务器，可以用 IP 地址哈希这种负载均衡机制。<br>使用 IP 地址哈希这种方式时，对于客户端的请求，客户端 IP 地址的哈希值是用来选择服务器组中服务器的关键。这种方法保证了同样客户端的请求，会被分发给同一台服务器，除非服务器不可用。<br>配置 IP 地址哈希负载均衡机制，只要在服务器组中加上 ip_hash 指令即可：</p><pre><code>upstream myapp1 {    ip_hash;    server srv1.example.com;    server srv2.example.com;    server srv3.example.com;}</code></pre><h1 id="权重负载均衡"><a href="#权重负载均衡" class="headerlink" title="权重负载均衡"></a>权重负载均衡</h1><p>还可以用服务器权重来支配 nginx 负载均衡的算法。<br>在上面的例子中，没有配置服务器的权重，意味着在一种负载均衡机制中，所有的服务器会被平等地对待。<br>特别是轮询调度机制，这也意味着服务器上请求的分配或多或少是相等的 —— 只要有足够的请求，并且以统一的方式处理，并且完成得足够快。<br>当给一台服务器配了 weight 参数，weight 会被当成负载均衡决策的一部分来处理。</p><pre><code>upstream myapp1 {    server srv1.example.com weight=3;    server srv2.example.com;    server srv3.example.com;}</code></pre><p>按上面的配置，每 5 个新请求会按以下方式分发给程序实例：3 个请求分发给 srv1，1 个请求分发给 srv2，另一个请求分发给 srv3。<br>在最近的 nginx 版本中，也可以在最少连接和 IP 地址哈希机制中类似地使用权重。</p><h1 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h1><p>nginx 的反向代理实现包含了带内（或被动的）服务器健康检查。如果某台服务器响应错误，nginx 会把这台服务器标记为失败，并且对接下来的请求不会分发给这台服务器。<br>max_fails 指令设置的是，在 fail_timeout 时间内，尝试和服务器沟通连续失败的次数。max_fails 的默认值是 1。当设为 0 时，表示不对这台服务器做健康检查。fail_timeout 参数同样定义了服务器多久会被标记为故障。在服务器故障之后，nginx 会间隔 fail_timeout 用客户端的请求去探测一下服务器。如果服务器探测成功，会被标记为可使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(译) Nginx 是怎么处理一个请求的</title>
      <link href="/2018/07/15/yi-nginx-shi-zen-me-chu-li-yi-ge-qing-qiu-de/"/>
      <url>/2018/07/15/yi-nginx-shi-zen-me-chu-li-yi-ge-qing-qiu-de/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="http://nginx.org/en/docs/http/request_processing.html" target="_blank" rel="noopener">How nginx processes a request</a></p><h1 id="基于服务器名的虚拟服务器"><a href="#基于服务器名的虚拟服务器" class="headerlink" title="基于服务器名的虚拟服务器"></a>基于服务器名的虚拟服务器</h1><p>首先，nginx 会先判断应该由哪个服务器来处理请求。我们来看一个简单的配置文件，这个配置文件配置了三个监听 80 端口的虚拟服务器：</p><pre><code>server {    listen      80;    server_name example.org www.example.org;    ...}server {    listen      80;    server_name example.net www.example.net;    ...}server {    listen      80;    server_name example.com www.example.com;    ...}</code></pre><p>在这个配置中，nginx 只会检测请求头的 “Host” 字段，来决定请求应该被路由到哪个服务器。如果没有匹配的域名，或者请求头没带 “Host” 字段，nginx 会把请求路由到监听这个端口的默认服务器。在上面的配置中，默认服务器是第一个，这是 nginx 的默认行为。也可以用 default_server 这个监听指令来显式地指定默认服务器。</p><pre><code>server {    listen      80 default_server;    server_name example.net www.example.net;    ...}</code></pre><blockquote><p>0.8.21 之后的版本可以用 default_server 这个参数，而之前的版本应该用 default </p></blockquote><p><strong>需要注意一下，默认服务器是监听端口的一个属性，而不是服务器名的属性。</strong></p><h1 id="如何不处理没有定义服务器名的请求"><a href="#如何不处理没有定义服务器名的请求" class="headerlink" title="如何不处理没有定义服务器名的请求"></a>如何不处理没有定义服务器名的请求</h1><p>如果一个请求的请求头没有 “Host” 自动，那么这个请求不该被处理，一个丢弃这些请求的服务器配置可以这样定义：</p><pre><code>server {    listen      80;    server_name &quot;&quot;;    return      444;}</code></pre><p>以上配置，服务器名设为一个空字符串，这样会匹配那些没设 “Host” 字段的请求，然后返回一个特殊的 nginx 的非标准返回码 444 并且关闭连接。</p><blockquote><p>从 0.8.48 版本开始，这是服务器名的默认配置，所以 server_name “” 可以忽略掉。而在之前的版本，服务器的主机名会被用作默认服务器名。</p></blockquote><h1 id="基于服务器名和基于-IP-混合配置的虚拟服务器"><a href="#基于服务器名和基于-IP-混合配置的虚拟服务器" class="headerlink" title="基于服务器名和基于 IP 混合配置的虚拟服务器"></a>基于服务器名和基于 IP 混合配置的虚拟服务器</h1><p>我们来看一个复杂的配置，这个配置配置了几个监听不同地址的虚拟服务器：</p><pre><code>server {    listen      192.168.1.1:80;    server_name example.org www.example.org;    ...}server {    listen      192.168.1.1:80;    server_name example.net www.example.net;    ...}server {    listen      192.168.1.2:80;    server_name example.com www.example.com;    ...}</code></pre><p>在这个配置中，nginx 会先根据在 server 区块中配置的要监听的 IP 地址和端口来检测请求。然后在匹配的 IP 地址和端口的配置中，再检测请求的 “Host” 字段。如果服务器名没被找到，请求就会被默认服务器处理。举个例子，一个从 192.168.1.1:80 收到的，<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 请求，会被 192.168.1.1:80 的默认服务器处理，也即给第一个服务器处理，因为这个端口没定义处理 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 的虚拟服务器。<br>如之前所说的，默认服务器是监听端口的一个属性，不同的端口可以定义不同的默认服务器：</p><pre><code>server {    listen      192.168.1.1:80;    server_name example.org www.example.org;    ...}server {    listen      192.168.1.1:80 default_server;    server_name example.net www.example.net;    ...}server {    listen      192.168.1.2:80 default_server;    server_name example.com www.example.com;    ...}</code></pre><h1 id="一个简单的-PHP-网站的配置"><a href="#一个简单的-PHP-网站的配置" class="headerlink" title="一个简单的 PHP 网站的配置"></a>一个简单的 PHP 网站的配置</h1><p>我们来看一下，在一个经典的，简单的 PHP 网站中，nginx 处理请求的时候是怎么选择 location 的。</p><pre><code>server {    listen      80;    server_name example.org www.example.org;    root        /data/www;    location / {        index   index.html index.php;    }    location ~* \.(gif|jpg|png)$ {        expires 30d;    }    location ~ \.php$ {        fastcgi_pass  localhost:9000;        fastcgi_param SCRIPT_FILENAME                      $document_root$fastcgi_script_name;        include       fastcgi_params;    }}</code></pre><p>nginx 会先搜索特定字符串所给出的前缀位置，而不是考虑所列出的顺序。在上面的配置中，唯一的前缀位置是“/”，它会匹配所有的请求，所以最后才会用到。nginx 会按顺序检查在配置文件中列出的正则表达式，并使用第一个匹配的位置。如果没找到匹配的正则表达式，nginx 会用最特别的“/”位置。<br>需要注意的是，所有的位置只会检查请求的 URI 部分，不会检查参数。因为 query 参数可以按几种不同的方式给出，如：</p><pre><code>/index.php?user=john&amp;page=1/index.php?page=1&amp;user=john</code></pre><p>另外，请求的 query 字符串可能出现随便什么东西：</p><pre><code>/index.php?page=1&amp;something+else&amp;user=john</code></pre><p>我们来看一下根据上面的配置，一个请求会被怎么处理：</p><ul><li>“logo.gif” 请求会先匹配前缀位置“/”，然后再匹配正则表达式“.(gif|jpg|png)$”。因此这个请求会被后面的位置处理。因为用了“root /data/www”指令，所以请求会被映射到 /data/www/logo.gif 文件，然后这个文件就会被发给客户端。</li><li>“/index.php” 也会先匹配前缀位置“/”，然后再匹配正则表达式“.(php)$”。因此这个请求会被后面的 location 处理，请求会被传给监听 localhost:9000 的 FastCGI 服务器。fastcgi_param 指令设置了 FastCGI 参数 SCRIPT_FILENAME 为 “/data/www/index.php”，FastCGI 服务器执行这个文件。变量 $document_root 等于 root 指令定义的值，变量 $fastcgi_script_name 等于请求的 URI，即 “/index.php”。</li><li>“/about.html”请求只匹配前缀位置“/”，因此会被这个 location 处理。因为用了“root /data/www”指令，所以请求会被映射到 /data/www/about.html 文件，然后这个文件就会被发给客户端。</li><li>处理“/”请求会复杂一点。请求只匹配前缀位置“/”，因此会被这个 location 处理。然后 index 指令会根据“root /data/www”指令设定的参数检查 index 文件的存在。如果 /data/www/index.html 文件不存在，而 /data/www/index.php 文件存在，index 指令会做一个内部的重定向到“index.php”，然后 nginx 会再次搜索 locations 。如我们之前看到的，被重定向的请求最终会被 FastCGI 服务器处理。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之缓存系统</title>
      <link href="/2018/07/04/shen-ru-laravel-zhi-huan-cun-xi-tong/"/>
      <url>/2018/07/04/shen-ru-laravel-zhi-huan-cun-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>Laravel 为各种后端缓存系统提供了丰富统一的 API，这节我们来看看 Laravel 的缓存系统。</p><h1 id="缓存系统的-interface"><a href="#缓存系统的-interface" class="headerlink" title="缓存系统的 interface"></a>缓存系统的 interface</h1><p>缓存系统的主要接口有两个：</p><ul><li>Illuminate\Contracts\Cache\Repository</li><li>Illuminate\Contracts\Cache\Store</li></ul><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\</span>SimpleCache<span class="token punctuation">\</span>CacheInterface</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Repository</span> <span class="token keyword">extends</span> <span class="token class-name">CacheInterface</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 判断缓存中是否存在 $key 的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过 $key 从缓存中获取数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过 key 从缓存中获取数据出来后，把缓存中的数据删掉     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">pull</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把数据存到缓存     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果缓存中不存在 $key，把数据存到缓存     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 增加缓存中某个项目的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 减小缓存中某个项目的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把某数据永久存在缓存中     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">forever</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从缓存中获取某数据，如果不存在，回调用 $callback 来获取这个数据，并存储到缓存     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">remember</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">,</span> Closure <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从缓存中获取某数据，如果不存在，回调用 $callback 来获取这个数据，并永久地存储到缓存     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">sear</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> Closure <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从缓存中获取某数据，如果不存在，回调用 $callback 来获取这个数据，并永久地存储到缓存     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">rememberForever</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> Closure <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从缓存中移除某项数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">forget</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取 store 实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Repository 接口继承了 Psr\SimpleCache\CacheInterface，我们再来看看这个接口。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Psr<span class="token punctuation">\</span>SimpleCache</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">CacheInterface</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过 $key 从缓存中获取数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把数据存到缓存中     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$ttl</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过 $key 从缓存中删除某项数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 清除缓存中所有数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过 $keys 从缓存中获取多个数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getMultiple</span><span class="token punctuation">(</span><span class="token variable">$keys</span><span class="token punctuation">,</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存储一系列数据到缓存     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setMultiple</span><span class="token punctuation">(</span><span class="token variable">$values</span><span class="token punctuation">,</span> <span class="token variable">$ttl</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过 $keys 从缓存中删除多个数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">deleteMultiple</span><span class="token punctuation">(</span><span class="token variable">$keys</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 判断缓存中是否存在 $key 的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Store</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过 $key 从缓存中获取数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过 $keys 从缓存中获取多个数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">many</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$keys</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把数据存到缓存中     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存储一系列数据到缓存     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">putMany</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$values</span><span class="token punctuation">,</span> <span class="token variable">$minutes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 增加缓存中某个项目的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 减小缓存中某个项目的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 把某个数据永久地存在缓存中     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">forever</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过 $key 删除缓存中某项数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">forget</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 清除缓存中所有数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取缓存键的前缀     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Store-和-Repository-区别"><a href="#Store-和-Repository-区别" class="headerlink" title="Store 和 Repository 区别"></a>Store 和 Repository 区别</h1><p>看了 Illuminate\Contracts\Cache\Store 和 Illuminate\Contracts\Cache\Repository，大家肯定也发现了这两个接口很相似。那这两个接口的区别是什么呢？我们先来看看实现这两个接口的类。</p><p><img src="https://i.loli.net/2018/07/08/5b41d8a7d6590.jpeg" alt><br><img src="https://i.loli.net/2018/07/08/5b41d8a85a044.jpeg" alt></p><p>可以看到，Store 是对缓存后端，比如 Redis，Memcached 等的封装；Repository 是供用户使用的统一的 API 封装。</p><h1 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h1><p>缓存系统主要有以下几个角色：</p><ul><li>Cache 服务提供者，负责和 Laravel 建立连接</li><li>Cache Manager，负责管理整个缓存系统</li><li>Driver，即 store，负责对缓存后端，比如 Redis，Memcached 等的封装</li></ul><h2 id="Cache-服务提供者"><a href="#Cache-服务提供者" class="headerlink" title="Cache 服务提供者"></a>Cache 服务提供者</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>ServiceProvider</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CacheServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">'cache'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CacheManager</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">'cache.store'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$app</span><span class="token punctuation">[</span><span class="token string">'cache'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">'memcached.connector'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MemcachedConnector</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>主要是把 cache manager 和 cache driver 绑定到 Laravel 的服务容器。memcached connector 主要用于 Memcached driver。</p><h2 id="Cache-Manager"><a href="#Cache-Manager" class="headerlink" title="Cache Manager"></a>Cache Manager</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">InvalidArgumentException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Store</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Factory</span> <span class="token keyword">as</span> FactoryContract<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>Dispatcher</span> <span class="token keyword">as</span> DispatcherContract<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CacheManager</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryContract</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Get a cache store instance by name.     *     * @param  string|null  $name     * @return \Illuminate\Contracts\Cache\Repository     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$name</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDefaultDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stores</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Resolve the given store.     *     * @param  string  $name     * @return \Illuminate\Contracts\Cache\Repository     *     * @throws \InvalidArgumentException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cache store [{$name}] is not defined."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">customCreators</span><span class="token punctuation">[</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'driver'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">callCustomCreator</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$driverMethod</span> <span class="token operator">=</span> <span class="token string">'create'</span><span class="token punctuation">.</span><span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'driver'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'Driver'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$driverMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$driverMethod</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string">"Driver [{$config['driver']}] is not supported."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Create an instance of the Memcached cache driver.     *     * @param  array  $config     * @return \Illuminate\Cache\MemcachedStore     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createMemcachedDriver</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$config</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$memcached</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">[</span><span class="token string">'memcached.connector'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span>            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'servers'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'persistent_id'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'options'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'sasl'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">repository</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MemcachedStore</span><span class="token punctuation">(</span><span class="token variable">$memcached</span><span class="token punctuation">,</span> <span class="token variable">$prefix</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Create an instance of the Redis cache driver.     *     * @param  array  $config     * @return \Illuminate\Cache\RedisStore     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createRedisDriver</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$config</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">[</span><span class="token string">'redis'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'connection'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'default'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">repository</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisStore</span><span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPrefix</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Register a custom driver creator Closure.     *     * @param  string    $driver     * @param  \Closure  $callback     * @return $this     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token variable">$driver</span><span class="token punctuation">,</span> Closure <span class="token variable">$callback</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">customCreators</span><span class="token punctuation">[</span><span class="token variable">$driver</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$callback</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindTo</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Dynamically call the default driver instance.     *     * @param  string  $method     * @param  array   $parameters     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$method</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><ul><li>__call 中直接调用 $this-&gt;store() 的方法，$this-&gt;store() 会返回一个 \Illuminate\Contracts\Cache\Repository 实例，所以 cache manager 拥有 repository 的所有功能</li><li>resolve() 方法负责根据 cache 的配置，创建不同 driver 的 repository 实例</li><li>extend() 可以扩展缓存系统</li></ul><h2 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h2><p>缓存 driver 部分，就是实现 Illuminate\Contracts\Cache\Store 接口，对缓存后端的封装。Laravel 目前支持 file，redis，apc，database，array 的缓存。<br>以 redis 为例，我们看一下 public function get($key) 的实现</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Store</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Redis<span class="token punctuation">\</span>Factory</span> <span class="token keyword">as</span> Redis<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RedisStore</span> <span class="token keyword">extends</span> <span class="token class-name">TaggableStore</span> <span class="token keyword">implements</span> <span class="token class-name">Store</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Retrieve an item from the cache by key.     *     * @param  string|array  $key     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">prefix</span><span class="token punctuation">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>其实就是用 \Redis 的方法来实现的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之事件</title>
      <link href="/2018/06/30/shen-ru-laravel-zhi-shi-jian/"/>
      <url>/2018/06/30/shen-ru-laravel-zhi-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>Laravel 的事件系统提供了一个观察者模式的简单实现，让你可以监听和订阅程序中的各种事件。</p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h2><pre class=" language-bash"><code class="language-bash">php artisan make:event OrderShipped</code></pre><p>以上命令会在 app/Events 目录生成 OrderShipped</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Events</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Order</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>SerializesModels</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OrderShipped</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">SerializesModels</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$order</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Create a new event instance.     *     * @param  \App\Order  $order     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Order <span class="token variable">$order</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">order</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="定义监听器"><a href="#定义监听器" class="headerlink" title="定义监听器"></a>定义监听器</h2><p>在 app/Listeners 目录添加 SendShipmentNotification.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Listeners</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>OrderShipped</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SendShipmentNotification</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Create the event listener.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Handle the event.     *     * @param  OrderShipped  $event     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>OrderShipped <span class="token variable">$event</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Access the order using $event->order...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当监听处理的事情比较耗时，而且可以异步处理的话，可以把监听器放到队列执行。<br>配置好队列后，把监听器放到队列执行，只需要 implement Illuminate\Contracts\Queue\ShouldQueue 即可。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Listeners</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>OrderShipped</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>ShouldQueue</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SendShipmentNotification</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldQueue</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span></code></pre><h2 id="注册事件和监听器"><a href="#注册事件和监听器" class="headerlink" title="注册事件和监听器"></a>注册事件和监听器</h2><p>在 App\Providers\EventServiceProvider 注册事件和监听器</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Providers</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventServiceProvider</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">protected</span> <span class="token variable">$listen</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'App\Events\OrderShipped'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'App\Listeners\SendShipmentNotification'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="分发事件"><a href="#分发事件" class="headerlink" title="分发事件"></a>分发事件</h2><p>分发事件使用 event() helper 即可</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Order</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>OrderShipped</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Ship the given order.     *     * @param  int  $orderId     * @return Response     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">ship</span><span class="token punctuation">(</span><span class="token variable">$orderId</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> Order<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$orderId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Order shipment logic...</span>        <span class="token function">event</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderShipped</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="负责接入-Laravel-的-EventServiceProvider"><a href="#负责接入-Laravel-的-EventServiceProvider" class="headerlink" title="负责接入 Laravel 的 EventServiceProvider"></a>负责接入 Laravel 的 EventServiceProvider</h2><p>负责介入 Laravel 的 EventServiceProvider，即 Illuminate\Events\EventServiceProvider。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Events</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>ServiceProvider</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Factory</span> <span class="token keyword">as</span> QueueFactoryContract<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Register the service provider.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setQueueResolver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span>QueueFactoryContract<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，这里做的事情很简单，只注册了一个 events 的绑定。<br>这个 service provider 会在 Illuminate\Foundation\Application@registerBaseServiceProviders 注册，所以 Laravel 容器初始化完之后，这个 service provider 就已经注册好了。</p><h2 id="负责管理事件和监听器关系的-EventServiceProvider"><a href="#负责管理事件和监听器关系的-EventServiceProvider" class="headerlink" title="负责管理事件和监听器关系的 EventServiceProvider"></a>负责管理事件和监听器关系的 EventServiceProvider</h2><p>负责管理事件和监听器关系的 EventServiceProvider，即 App\Providers\EventServiceProvider。<br>我们在 config/app.php 的 providers 可以看到，</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">return</span> <span class="token punctuation">[</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token string">'providers'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        App\<span class="token package">Providers<span class="token punctuation">\</span>EventServiceProvider</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>所以当 http kernel 跑起来后，事件和监听器关系便注册好了。</p><p>我们来看看 Illuminate\Foundation\Support\Providers\EventServiceProvider 的代码。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Providers</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">EventServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">listens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$event</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$listeners</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$listeners</span> <span class="token keyword">as</span> <span class="token variable">$listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Event<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$listener</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">subscribe</span> <span class="token keyword">as</span> <span class="token variable">$subscriber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Event<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token variable">$subscriber</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这里主要是调用 Illuminate\Events\Dispatcher 的 listen($events, $listener) 来注册事件和监听器，还有 subscribe($subscriber) 用来注册订阅者。</p><h2 id="事件系统的核心-——-Dispatcher"><a href="#事件系统的核心-——-Dispatcher" class="headerlink" title="事件系统的核心 —— Dispatcher"></a>事件系统的核心 —— Dispatcher</h2><h3 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h3><p>我们先看一下 Dispatcher 的 listen($events, $listener)</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Events</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token keyword">implements</span> <span class="token class-name">DispatcherContract</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">,</span> <span class="token variable">$listener</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">)</span> <span class="token variable">$events</span> <span class="token keyword">as</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setupWildcardListen</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$listener</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">listeners</span><span class="token punctuation">[</span><span class="token variable">$event</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">makeListener</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>makeListener($listener, $wildcard = false) 会返回一个闭包，对于通配符 ‘*’ 的事件，会把 $wildcard 设为 true。我们再看看和创建 listener 相关的实现。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Events</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token keyword">implements</span> <span class="token class-name">DispatcherContract</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">makeListener</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">,</span> <span class="token variable">$wildcard</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createClassListener</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">,</span> <span class="token variable">$wildcard</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">,</span> <span class="token variable">$wildcard</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$wildcard</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$listener</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$listener</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">createClassListener</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">,</span> <span class="token variable">$wildcard</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">,</span> <span class="token variable">$wildcard</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$wildcard</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createClassCallable</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createClassCallable</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$payload</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createClassCallable</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseClassCallable</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handlerShouldBeQueued</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createQueuedHandlerCallable</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">handlerShouldBeQueued</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">implementsInterface</span><span class="token punctuation">(</span>                ShouldQueue<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createQueuedHandlerCallable</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$arguments</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">?</span> clone <span class="token variable">$a</span> <span class="token punctuation">:</span> <span class="token variable">$a</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handlerWantsToBeQueued</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">queueHandler</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">queueHandler</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token punctuation">,</span> <span class="token variable">$job</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createListenerAndJob</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolveQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connection</span><span class="token punctuation">(</span>            <span class="token variable">$listener</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connection</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">null</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$queue</span> <span class="token operator">=</span> <span class="token variable">$listener</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$listener</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delay</span><span class="token punctuation">)</span>                    <span class="token operator">?</span> <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">laterOn</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$listener</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delay</span><span class="token punctuation">,</span> <span class="token variable">$job</span><span class="token punctuation">)</span>                    <span class="token punctuation">:</span> <span class="token variable">$connection</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushOn</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$job</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>从上面可以整理出流程：把注册的 Listener 类转成一个闭包，通过反射<br>判断 listener 有没有实现 Illuminate\Contracts\Queue\ShouldQueue，如果有，就生成一个把 listener 放进队列执行的闭包。</p><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>event helper 实际上会调用 dispatch($event, $payload = [], $halt = false) </p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Events</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token keyword">implements</span> <span class="token class-name">DispatcherContract</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$halt</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseEventAndPayload</span><span class="token punctuation">(</span>            <span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$payload</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBroadcast</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">broadcastEvent</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$responses</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getListeners</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$listener</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$halt</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$response</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$responses</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$response</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$halt</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token variable">$responses</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>以上代码做了以下事情：</p><ul><li>当传进来的是一个事件对象，会把事件的类名当成事件名，事件对象本身当做 payload</li><li>把事件的所有监听器取出来执行</li><li>如果 $halt 为 true，遇到一个 response 不为 null 时，会直接返回 response</li><li>如果其中一个监听器执行完之后，返回了 false，就会中断执行剩下的监听器</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之队列</title>
      <link href="/2018/06/22/shen-ru-laravel-zhi-dui-lie/"/>
      <url>/2018/06/22/shen-ru-laravel-zhi-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>Laravel 的队列为多种不同的队列后台提供了统一的 API，比如 Beanstalk， Amazon SQS，Redis，还有关系型数据库。接下来让我们通过这篇文章深入地了解一下 Laravel 的队列。</p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="定义-QUEUE-DRIVER"><a href="#定义-QUEUE-DRIVER" class="headerlink" title="定义 QUEUE_DRIVER"></a>定义 QUEUE_DRIVER</h2><p>修改 .env 中的 QUEUE_DRIVER 即可，值可以是 sync、database、beanstalkd、sqs、redis，我们以 database 为例。（要 php artisan queue:table 添加 jobs 表）</p><h2 id="创建-Job"><a href="#创建-Job" class="headerlink" title="创建 Job"></a>创建 Job</h2><pre class=" language-bash"><code class="language-bash">php artisan make:job ProcessPodcast</code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Jobs</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Queueable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>SerializesModels</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>InteractsWithQueue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>ShouldQueue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatchable</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ProcessPodcast</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldQueue</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Dispatchable</span><span class="token punctuation">,</span> InteractsWithQueue<span class="token punctuation">,</span> Queueable<span class="token punctuation">,</span> SerializesModels<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Create a new job instance.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Execute the job.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Process uploaded podcast...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>job 必须 implement Illuminate\Contracts\Queue\ShouldQueue 这个 interface，这样 Laravel 会把这个 job 放到队列来执行</li><li>当 job 被执行的时候，handle 方法会被调用</li></ol><h2 id="分发-Job"><a href="#分发-Job" class="headerlink" title="分发 Job"></a>分发 Job</h2><pre class=" language-php"><code class="language-php">ProcessPodcast<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="队列-worker"><a href="#队列-worker" class="headerlink" title="队列 worker"></a>队列 worker</h2><pre class=" language-bash"><code class="language-bash">php artisan queue:work</code></pre><p>以上命令会处理队列里的 job，一般都要 Supervisor 来监控，保证 worker 进程一直在跑。</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="Illuminate-Queue-QueueServiceProvider"><a href="#Illuminate-Queue-QueueServiceProvider" class="headerlink" title="Illuminate\Queue\QueueServiceProvider"></a>Illuminate\Queue\QueueServiceProvider</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>ServiceProvider</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Connectors<span class="token punctuation">\</span>SqsConnector</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Connectors<span class="token punctuation">\</span>NullConnector</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Connectors<span class="token punctuation">\</span>SyncConnector</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Connectors<span class="token punctuation">\</span>RedisConnector</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Debug<span class="token punctuation">\</span>ExceptionHandler</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Connectors<span class="token punctuation">\</span>DatabaseConnector</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Failed<span class="token punctuation">\</span>NullFailedJobProvider</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Connectors<span class="token punctuation">\</span>BeanstalkdConnector</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Failed<span class="token punctuation">\</span>DatabaseFailedJobProvider</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QueueServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Indicates if loading of the provider is deferred.     *     * @var bool     */</span>    <span class="token keyword">protected</span> <span class="token variable">$defer</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Register the service provider.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注册队列管理员，</span>        <span class="token comment" spellcheck="true">// 即 Illuminate\Queue\QueueManager，</span>        <span class="token comment" spellcheck="true">// 具体分析看下个小节</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定 queue.connection</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定 queue.worker，</span>        <span class="token comment" spellcheck="true">// Laravel 绑定了 Illuminate\Queue\Worker</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定队列监听器</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定记录执行失败的 job 的处理</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerFailedJobServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 队列管理员中用到的连接器都是在这里配置的     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">registerConnectors</span><span class="token punctuation">(</span><span class="token variable">$manager</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Null'</span><span class="token punctuation">,</span> <span class="token string">'Sync'</span><span class="token punctuation">,</span> <span class="token string">'Database'</span><span class="token punctuation">,</span> <span class="token string">'Redis'</span><span class="token punctuation">,</span> <span class="token string">'Beanstalkd'</span><span class="token punctuation">,</span> <span class="token string">'Sqs'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$connector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token string">"register{$connector}Connector"</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token variable">$manager</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Queue-QueueManager"><a href="#Illuminate-Queue-QueueManager" class="headerlink" title="Illuminate\Queue\QueueManager"></a>Illuminate\Queue\QueueManager</h2><p>QueueManager 负责添加队列各种事件的监听，创建队列连接实例。<br>我们主要看一下创建队列连接实例的代码。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">InvalidArgumentException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Factory</span> <span class="token keyword">as</span> FactoryContract<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Monitor</span> <span class="token keyword">as</span> MonitorContract<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @mixin \Illuminate\Contracts\Queue\Queue */</span><span class="token keyword">class</span> <span class="token class-name">QueueManager</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryContract</span><span class="token punctuation">,</span> MonitorContract<span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$name</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDefaultDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 队列连接实例如果已经解析过则直接获取</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connections</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析队列连接实例</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connections</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connections</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setContainer</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connections</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析一个队列连接实例     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取队列的配置</span>        <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取对应的连接器，并设置队列名字后返回</span>        <span class="token comment" spellcheck="true">// 连接器会在 Illuminate\Queue\QueueServiceProvider 注册进来</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConnector</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'driver'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span>                        <span class="token operator">-</span><span class="token operator">></span><span class="token function">setConnectionName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Queue-Console-WorkCommand"><a href="#Illuminate-Queue-Console-WorkCommand" class="headerlink" title="Illuminate\Queue\Console\WorkCommand"></a>Illuminate\Queue\Console\WorkCommand</h2><p>WorkCommand 主要实现了 php artisan queue:work 命令。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Console</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Worker</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Carbon</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Console<span class="token punctuation">\</span>Command</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Job</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>WorkerOptions</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>JobFailed</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>JobProcessed</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>JobProcessing</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">WorkCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The console command name.     *     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$signature</span> <span class="token operator">=</span> 'queue<span class="token punctuation">:</span>work                            <span class="token punctuation">{</span>connection<span class="token operator">?</span> <span class="token punctuation">:</span> The name of the queue connection to work<span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>queue<span class="token operator">=</span> <span class="token punctuation">:</span> The names of the queues to work<span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>daemon <span class="token punctuation">:</span> Run the worker in daemon <span class="token function">mode</span> <span class="token punctuation">(</span>Deprecated<span class="token punctuation">)</span><span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>once <span class="token punctuation">:</span> Only process the next job on the queue<span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>delay<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">:</span> The number of seconds to delay failed jobs<span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>force <span class="token punctuation">:</span> Force the worker to run even in maintenance mode<span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>memory<span class="token operator">=</span><span class="token number">128</span> <span class="token punctuation">:</span> The memory limit in megabytes<span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>sleep<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">:</span> Number of seconds to sleep when no job is available<span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>timeout<span class="token operator">=</span><span class="token number">60</span> <span class="token punctuation">:</span> The number of seconds a child process can run<span class="token punctuation">}</span>                            <span class="token punctuation">{</span><span class="token operator">--</span>tries<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">:</span> Number of times to attempt a job before logging it failed<span class="token punctuation">}</span>'<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The console command description.     *     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token string">'Start processing jobs on the queue as a daemon'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队列 worker 实例     * @var \Illuminate\Queue\Worker     */</span>    <span class="token keyword">protected</span> <span class="token variable">$worker</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注入队列 worker 实例</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Worker <span class="token variable">$worker</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">worker</span> <span class="token operator">=</span> <span class="token variable">$worker</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Execute the console command.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果当前是维护模式，</span>        <span class="token comment" spellcheck="true">// 而且有 once 标志，</span>        <span class="token comment" spellcheck="true">// 就一直 sleep，不执行其他 job</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">downForMaintenance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'once'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'sleep'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 配置正在处理，已处理，处理失败的事件</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">listenForEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取连接，如果命令没有指定，则用 config/queue.php 中 default 的值</span>        <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">)</span>                        <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">laravel</span><span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'queue.default'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取队列名，默认为 default</span>        <span class="token variable">$queue</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行队列 worker</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">runWorker</span><span class="token punctuation">(</span>            <span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$queue</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行 worker 实例     * @param  string  $connection     * @param  string  $queue     * @return array     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$queue</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置队列 worker 使用的 cache</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setCache</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">laravel</span><span class="token punctuation">[</span><span class="token string">'cache'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理队列的任务，</span>        <span class="token comment" spellcheck="true">// 如果设置了 once 标志，</span>        <span class="token comment" spellcheck="true">// 则只处理一次队列中的任务</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">worker</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'once'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'runNextJob'</span> <span class="token punctuation">:</span> <span class="token string">'daemon'</span><span class="token punctuation">}</span><span class="token punctuation">(</span>            <span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">gatherWorkerOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Queue-Worker"><a href="#Illuminate-Queue-Worker" class="headerlink" title="Illuminate\Queue\Worker"></a>Illuminate\Queue\Worker</h2><p>Worker 主要实现了队列守护进程的处理。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Exception</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>Repository</span> <span class="token keyword">as</span> CacheContract<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Worker</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">daemon</span><span class="token punctuation">(</span><span class="token variable">$connectionName</span><span class="token punctuation">,</span> <span class="token variable">$queue</span><span class="token punctuation">,</span> WorkerOptions <span class="token variable">$options</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果支持 pcntl，</span>        <span class="token comment" spellcheck="true">// 则监听系统信号并作出相应处理，</span>        <span class="token comment" spellcheck="true">// 监听了 SIGTERM、SIGUSR2、SIGCONT 这三个信号</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">supportsAsyncSignals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">listenForSignals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从 cache 获取最后一个队列重新启动的时间戳</span>        <span class="token variable">$lastRestart</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTimestampOfLastQueueRestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 每次迭代检查一次守护进程是否该暂停</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">daemonShouldRun</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token variable">$connectionName</span><span class="token punctuation">,</span> <span class="token variable">$queue</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 停止 worker 进程</span>                <span class="token comment" spellcheck="true">// sleep 或者退出 worker 进程</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pauseWorker</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token variable">$lastRestart</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 从队列中取出一个 job</span>            <span class="token variable">$job</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNextJob</span><span class="token punctuation">(</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">manager</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token variable">$connectionName</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$queue</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果支持 pcntl 异步信号</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">supportsAsyncSignals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 注册超时处理程序，</span>                <span class="token comment" spellcheck="true">// 如果一个 job 执行的时间太长就会触发这个处理，</span>                <span class="token comment" spellcheck="true">// 这个 job 就会被杀掉</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerTimeoutHandler</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果 job 不为空，则执行</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">runJob</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$connectionName</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果 job 为空，则 sleep</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sleep</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 检查是否超出内存限制，</span>            <span class="token comment" spellcheck="true">// 或者有其他的信号指示，</span>            <span class="token comment" spellcheck="true">// 则重启队列 worker</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopIfNecessary</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token variable">$lastRestart</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 暂停当前迭代的 worker     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">pauseWorker</span><span class="token punctuation">(</span>WorkerOptions <span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token variable">$lastRestart</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// sleep </span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sleep</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token variable">$options</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sleep</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查是否超出内存限制，</span>        <span class="token comment" spellcheck="true">// 或者有其他的信号指示，</span>        <span class="token comment" spellcheck="true">// 则重启队列 worker</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopIfNecessary</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token variable">$lastRestart</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">stopIfNecessary</span><span class="token punctuation">(</span>WorkerOptions <span class="token variable">$options</span><span class="token punctuation">,</span> <span class="token variable">$lastRestart</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果退出标记为真</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">shouldQuit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 杀掉当前 worker 进程</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果占用内存超出设定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">memoryExceeded</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">memory</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 退出当前脚本程序</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">queueShouldRestart</span><span class="token punctuation">(</span><span class="token variable">$lastRestart</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="分发-Job-1"><a href="#分发-Job-1" class="headerlink" title="分发 Job"></a>分发 Job</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bus</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatcher</span><span class="token punctuation">;</span><span class="token keyword">trait</span> <span class="token class-name">Dispatchable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 分发 job     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PendingDispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">static</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bus</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatcher</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PendingDispatch</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * 设置延时时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token variable">$delay</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">job</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token variable">$delay</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在析构的时候真正地把 job 分发出去</span>        <span class="token function">app</span><span class="token punctuation">(</span>Dispatcher<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">job</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">RuntimeException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Pipeline<span class="token punctuation">\</span>Pipeline</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Queue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>ShouldQueue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Container<span class="token punctuation">\</span>Container</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>QueueingDispatcher</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token keyword">implements</span> <span class="token class-name">QueueingDispatcher</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 把 command 分发给相应的处理程序</span>    <span class="token comment" spellcheck="true">// command 可以是一个 job</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果 command 是 Illuminate\Contracts\Queue\ShouldQueue 的实例，</span>        <span class="token comment" spellcheck="true">// 且队列解析器不为空，</span>        <span class="token comment" spellcheck="true">// 则分发到队列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queueResolver</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">commandShouldBeQueued</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatchToQueue</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatchNow</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把 job 分发进队列</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">dispatchToQueue</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取出 job 分发到的队列的连接</span>        <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connection</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取队列</span>        <span class="token variable">$queue</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queueResolver</span><span class="token punctuation">,</span> <span class="token variable">$connection</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$queue</span> <span class="token keyword">instanceof</span> <span class="token class-name">Queue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'Queue resolver did not return a Queue implementation.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token string">'queue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把 job 放进队列</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushCommandToQueue</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">pushCommandToQueue</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$command</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果 job 有设置过 queue 和 delay 属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span><span class="token punctuation">,</span> <span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delay</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">laterOn</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span><span class="token punctuation">,</span> <span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delay</span><span class="token punctuation">,</span> <span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果 job 有设置过 queue 属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushOn</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span><span class="token punctuation">,</span> <span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果 job 有设置过 delay 属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delay</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">later</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delay</span><span class="token punctuation">,</span> <span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把 job 放进队列</span>        <span class="token keyword">return</span> <span class="token variable">$queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Laravel 目前支持以下这些队列:<br><img src="https://i.loli.net/2018/06/24/5b2faf9d54f07.jpeg" alt></p><p>我们看一下 Illuminate\Queue\DatabaseQueue，其他的实现思路都是差不多的</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DatabaseQueue</span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span> <span class="token keyword">implements</span> <span class="token class-name">QueueContract</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * 把 job 放进队列     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$queue</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushToDatabase</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPayload</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把 payload 插入数据库     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">pushToDatabase</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">,</span> <span class="token variable">$delay</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$attempts</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">database</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">insertGetId</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildDatabaseRecord</span><span class="token punctuation">(</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">availableAt</span><span class="token punctuation">(</span><span class="token variable">$delay</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$attempts</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 数据库中每行数据的字段如下     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">buildDatabaseRecord</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$payload</span><span class="token punctuation">,</span> <span class="token variable">$availableAt</span><span class="token punctuation">,</span> <span class="token variable">$attempts</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            <span class="token string">'queue'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$queue</span><span class="token punctuation">,</span>            <span class="token string">'attempts'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$attempts</span><span class="token punctuation">,</span>            <span class="token string">'reserved_at'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token string">'available_at'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$availableAt</span><span class="token punctuation">,</span>            <span class="token string">'created_at'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'payload'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$payload</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">DateTimeInterface</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Container<span class="token punctuation">\</span>Container</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>InteractsWithTime</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * 生成 payload json 字符串内容     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createPayload</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createPayloadArray</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">JSON_ERROR_NONE</span> <span class="token operator">!==</span> <span class="token function">json_last_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidPayloadException</span><span class="token punctuation">(</span>                <span class="token string">'Unable to JSON encode payload. Error code: '</span><span class="token punctuation">.</span><span class="token function">json_last_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$payload</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成 payload 内容，数组格式     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createPayloadArray</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">)</span>                    <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createObjectPayload</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">)</span>                    <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createStringPayload</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * payload 的数据格式如下     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createObjectPayload</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            <span class="token string">'displayName'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'job'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'Illuminate\Queue\CallQueuedHandler@call'</span><span class="token punctuation">,</span>            <span class="token string">'maxTries'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$job</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tries</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token string">'timeout'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$job</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">timeout</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token string">'timeoutAt'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getJobExpiration</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'data'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>                <span class="token string">'commandName'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">'command'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">serialize</span><span class="token punctuation">(</span>clone <span class="token variable">$job</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="从队列获取-Job"><a href="#从队列获取-Job" class="headerlink" title="从队列获取 Job"></a>从队列获取 Job</h2><p>以 DatabaseQueue 为例子，其他队列思路是一样的</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Carbon</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>Connection</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Jobs<span class="token punctuation">\</span>DatabaseJob</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Jobs<span class="token punctuation">\</span>DatabaseJobRecord</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>Queue</span> <span class="token keyword">as</span> QueueContract<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DatabaseQueue</span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span> <span class="token keyword">implements</span> <span class="token class-name">QueueContract</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * 从队列中获取 job     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token variable">$queue</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取队列</span>        <span class="token variable">$queue</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">database</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从数据库读取 job 数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$job</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNextAvailableJob</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 用拿到的 job 生成一个 DatabaseJob 实例</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">marshalJob</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$job</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getNextAvailableJob</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把 reserved_at 为 null 且 available_at 小于或等于当前时间，</span>        <span class="token comment" spellcheck="true">// 或者 reserved_at 小于等于当前时间，</span>        <span class="token comment" spellcheck="true">// 的数据取第一条出来</span>        <span class="token variable">$job</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">database</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">lockForUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'queue'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isReservedButExpired</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'asc'</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$job</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseJobRecord</span><span class="token punctuation">(</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token variable">$job</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">marshalJob</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$job</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新数据库中的 job 对应数据的 reserved_at 和 attempts</span>        <span class="token variable">$job</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">markJobAsReserved</span><span class="token punctuation">(</span><span class="token variable">$job</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 DatabaseJob 实例</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseJob</span><span class="token punctuation">(</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$job</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connectionName</span><span class="token punctuation">,</span> <span class="token variable">$queue</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之路由</title>
      <link href="/2018/06/11/shen-ru-laravel-zhi-lu-you/"/>
      <url>/2018/06/11/shen-ru-laravel-zhi-lu-you/</url>
      
        <content type="html"><![CDATA[<p>路由主要是用来映射 url 和处理代码的关系，让我们给不同的 url 定义不同的处理代码的。Laravel 的路由非常强大，我们深入看看路由部分的代码。</p><h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h1><p>路由相关的代码，Laravel 会按以下顺序执行</p><ul><li><p>Illuminate\Routing\RoutingServiceProvider<br>  路由器服务提供者，主要绑定路由器、URL 生成器等组件到服务容器</p></li><li><p>Illuminate\Foundation\Support\Providers\RouteServiceProvider@boot<br>App\Providers\RouteServiceProvider<br>  加载 routes 目录下的路由，并设定 prefix、middleware、group 等配置</p></li><li><p>Illuminate\Foundation\Http\Kernel@dispatchToRouter<br>  把 request 分发给路由器</p></li><li><p>Illuminate\Routing\Router@dispatch<br>Illuminate\Routing\Router@dispatchToRoute<br>Illuminate\Routing\Router@findRoute<br>Illuminate\Routing\RouteCollection@match<br>Illuminate\Routing\Router@runRoute<br>Illuminate\Routing\Router@runRouteWithinStack<br>Illuminate\Routing\Route@run<br>找出路由的处理函数，并执行</p></li></ul><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="Illuminate-Routing-RoutingServiceProvider"><a href="#Illuminate-Routing-RoutingServiceProvider" class="headerlink" title="Illuminate\Routing\RoutingServiceProvider"></a>Illuminate\Routing\RoutingServiceProvider</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">RoutingServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注册 router ，</span>        <span class="token comment" spellcheck="true">// 这里注册的 router 主要用来定义 url 和处理代码的关系</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册 url 生成器，</span>        <span class="token comment" spellcheck="true">// 比如把命名路由生成 URL</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerUrlGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册重定向器，</span>        <span class="token comment" spellcheck="true">// 主要用来做 url 重定向</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerRedirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerPsrRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerPsrResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册响应工厂，</span>        <span class="token comment" spellcheck="true">// 主要用来生成返回给用户的数据</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerResponseFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册控制器分发器，</span>        <span class="token comment" spellcheck="true">// 主要用来调用控制器对应的方法</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerControllerDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Foundation-Support-Providers-RouteServiceProvider-boot"><a href="#Illuminate-Foundation-Support-Providers-RouteServiceProvider-boot" class="headerlink" title="Illuminate\Foundation\Support\Providers\RouteServiceProvider@boot"></a>Illuminate\Foundation\Support\Providers\RouteServiceProvider@boot</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">RouteServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置 UrlGenerator 的命名空间</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRootControllerNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断 bootstrap/cache/routes.php 是否存在</span>        <span class="token comment" spellcheck="true">// 这个文件的作用是把路由缓存起来，减少加载路由的时间，提升整体性能</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">routesAreCached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果 bootstrap/cache/routes.php ，则加载</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadCachedRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用 App\Providers\RouteServiceProvider@map 来加载路由</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">booted</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 更新路由命名查找表</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">[</span><span class="token string">'router'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">refreshNameLookups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 更新路由 action 查找表</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">[</span><span class="token string">'router'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">refreshActionLookups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Routing-Router-http-verbs-的处理"><a href="#Illuminate-Routing-Router-http-verbs-的处理" class="headerlink" title="Illuminate\Routing\Router http verbs 的处理"></a>Illuminate\Routing\Router http verbs 的处理</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Router</span> <span class="token keyword">implements</span> <span class="token class-name">RegistrarContract</span><span class="token punctuation">,</span> BindingRegistrar<span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Dispatcher <span class="token variable">$events</span><span class="token punctuation">,</span> Container <span class="token variable">$container</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 事件分发器</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">events</span> <span class="token operator">=</span> <span class="token variable">$events</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 路由集合</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">routes</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RouteCollection</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span> <span class="token operator">=</span> <span class="token variable">$container</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'HEAD'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    其他的 http 方法，如 post、put、patch 等都是类似的，所以我们看一下 <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 的实现    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token variable">$methods</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">routes</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createRoute</span><span class="token punctuation">(</span><span class="token variable">$methods</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createRoute</span><span class="token punctuation">(</span><span class="token variable">$methods</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先判断 $action 是不是 controller，</span>        <span class="token comment" spellcheck="true">// 如果是，会在 $action 添加 uses 和 controller 返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">actionReferencesController</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">convertToControllerAction</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 检查路由组有没有设置 prifix 参数，有的话拼接上 prefix</span>        <span class="token variable">$route</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newRoute</span><span class="token punctuation">(</span>            <span class="token variable">$methods</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$action</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 合并路由组设置的参数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hasGroupStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">mergeGroupAttributesIntoRoute</span><span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把 where 条件加到路由</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addWhereClausesToRoute</span><span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$route</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Routing-Router-请求被分发后的执行流程"><a href="#Illuminate-Routing-Router-请求被分发后的执行流程" class="headerlink" title="Illuminate\Routing\Router 请求被分发后的执行流程"></a>Illuminate\Routing\Router 请求被分发后的执行流程</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Router</span> <span class="token keyword">implements</span> <span class="token class-name">RegistrarContract</span><span class="token punctuation">,</span> BindingRegistrar<span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">currentRequest</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatchToRoute</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">dispatchToRoute</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 运行 route 实例</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">runRoute</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">findRoute</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">findRoute</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 查找和 Request 匹配的 Route 实例</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current</span> <span class="token operator">=</span> <span class="token variable">$route</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">routes</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">match</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 绑定 Route 实例</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">instance</span><span class="token punctuation">(</span>Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$route</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">match</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据 http 方法如 GET、POST、PUT 获取路由</span>        <span class="token variable">$routes</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 匹配路由，</span>        <span class="token comment" spellcheck="true">// 如果能匹配到，直接返回路由</span>        <span class="token comment" spellcheck="true">// 这里返回的是 Illuminate\Routing\Route</span>        <span class="token variable">$route</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">matchAgainstRoutes</span><span class="token punctuation">(</span><span class="token variable">$routes</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 $route 非空，则和 Request 绑定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$route</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果找不到匹配的 $route</span>        <span class="token comment" spellcheck="true">// 会尝试找一下其他的 http verbs 看看有没有相同的路由</span>        <span class="token variable">$others</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">checkForAlternateVerbs</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果有的话，会报 MethodNotAllowed 405 错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$others</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRouteForMethods</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$others</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果都找不到，报 404 错误</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotFoundHttpException</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">runRoute</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">,</span> Route <span class="token variable">$route</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置路由的解析器</span>        <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setRouteResolver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$route</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分发 RouteMatched 事件</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">events</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Events<span class="token punctuation">\</span>RouteMatched</span><span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 运行 $route 实例并返回响应</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepareResponse</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">runRouteWithinStack</span><span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">runRouteWithinStack</span><span class="token punctuation">(</span>Route <span class="token variable">$route</span><span class="token punctuation">,</span> Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断是否需要执行中间件</span>        <span class="token variable">$shouldSkipMiddleware</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bound</span><span class="token punctuation">(</span><span class="token string">'middleware.disable'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">'middleware.disable'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取路由的中间件</span>        <span class="token variable">$middleware</span> <span class="token operator">=</span> <span class="token variable">$shouldSkipMiddleware</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">gatherRouteMiddleware</span><span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行 before middleware</span>        <span class="token comment" spellcheck="true">// 执行路由的 action</span>        <span class="token comment" spellcheck="true">// 执行 after middleware</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>                        <span class="token operator">-</span><span class="token operator">></span><span class="token function">through</span><span class="token punctuation">(</span><span class="token variable">$middleware</span><span class="token punctuation">)</span>                        <span class="token operator">-</span><span class="token operator">></span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepareResponse</span><span class="token punctuation">(</span>                                <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$route</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Routing-Route"><a href="#Illuminate-Routing-Route" class="headerlink" title="Illuminate\Routing\Route"></a>Illuminate\Routing\Route</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Route</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">container</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断是不是 controller action</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isControllerAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行 controller action</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">runController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 直接执行 action </span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">runCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HttpResponseException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">runCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$callable</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">action</span><span class="token punctuation">[</span><span class="token string">'uses'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 callable 所需要的依赖，参数，</span>        <span class="token comment" spellcheck="true">// 然后执行</span>        <span class="token keyword">return</span> <span class="token variable">$callable</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolveMethodDependencies</span><span class="token punctuation">(</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parametersWithoutNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionFunction</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">action</span><span class="token punctuation">[</span><span class="token string">'uses'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">runController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 controller 和方法</span>        <span class="token comment" spellcheck="true">// 通过 controller 分发器分发执行</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">controllerDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatch</span><span class="token punctuation">(</span>            <span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getControllerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Routing-ControllerDispatcher"><a href="#Illuminate-Routing-ControllerDispatcher" class="headerlink" title="Illuminate\Routing\ControllerDispatcher"></a>Illuminate\Routing\ControllerDispatcher</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">ControllerDispatcher</span> <span class="token keyword">implements</span> <span class="token class-name">ControllerDispatcherContract</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>Route <span class="token variable">$route</span><span class="token punctuation">,</span> <span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析 controller 和方法所需要的依赖</span>        <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolveClassMethodDependencies</span><span class="token punctuation">(</span>            <span class="token variable">$route</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parametersWithoutNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$method</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行 controller 的 callAction 方法</span>        <span class="token comment" spellcheck="true">// callAction 回调用 call_user_func_array 来执行方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token string">'callAction'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$controller</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">callAction</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 执行 controller 的方法</span>        <span class="token keyword">return</span> <span class="token variable">$controller</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$method</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之 Facades</title>
      <link href="/2018/06/07/shen-ru-laravel-zhi-facades/"/>
      <url>/2018/06/07/shen-ru-laravel-zhi-facades/</url>
      
        <content type="html"><![CDATA[<p>Facade 一般中文翻译为 “门面”，是一种设计模式。</p><h1 id="Facade-优点"><a href="#Facade-优点" class="headerlink" title="Facade 优点"></a>Facade 优点</h1><ul><li><p>让 Api 变得简单清晰<br>  比如 \Illuminate\Cache\CacheManager::get，<br>  我们可以直接调用 \Cache::get 这样使用，不用记那一长串\Illuminate\Cache\CacheManager 。</p></li><li><p>方便测试<br>  laravel 的 Facade 帮我们实现了 shouldReceive() 、spy() 等测试方法，使我们写测试代码的时候非常方便。</p><p>  <code>`</code>php<br>use Illuminate\Support\Facades\Cache;</p></li></ul><p>public function testBasicExample()<br>{<br>    Cache::shouldReceive(‘get’)<br>         -&gt;with(‘key’)<br>         -&gt;andReturn(‘value’);</p><pre><code>$this-&gt;visit(&#39;/cache&#39;)     -&gt;see(&#39;value&#39;);</code></pre><p>}</p><pre><code>```</code></pre><h1 id="Facades-工作原理"><a href="#Facades-工作原理" class="headerlink" title="Facades 工作原理"></a>Facades 工作原理</h1><p>在 Laravel 中，Facade 就是一个可以从容器中访问对象的一个类。当我们以静态函数方式去调用某个方法的时候，就会触发 __callStatic ，然后通过容器解析出对应的实例，再调用实例的方法。</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图"></a>UML 图</h2><p>以 Cache 为例，我们看一下 UML</p><p><img src="https://i.loli.net/2018/06/08/5b1a8f3c71713.jpeg" alt></p><p>从上图可以看出，<br>Illuminate\Support\Facades\Cache 仅仅继承了 Illuminate\Support\Facades\Facade ，实现非常简单</p><p>接下来我们看看 Illuminate\Support\Facades\Facade 的代码</p><h2 id="Illuminate-Support-Facades-Facade"><a href="#Illuminate-Support-Facades-Facade" class="headerlink" title="Illuminate\Support\Facades\Facade"></a>Illuminate\Support\Facades\Facade</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Mockery</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">RuntimeException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Mockery<span class="token punctuation">\</span>MockInterface</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// laravel 容器</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token variable">$app</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析过的实例</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token variable">$resolvedInstance</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用于单元测试场景，忽略所有没被告知期望值的调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">spy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">isMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getMockableClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token variable">$class</span> <span class="token operator">?</span> Mockery<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> Mockery<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">spy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用于单元测试场景，定义将被调用的方法，以及其返回值</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">shouldReceive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$mock</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">isMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">?</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span>                    <span class="token punctuation">:</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createFreshMockInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$mock</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldReceive</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用于单元测试场景，创建一个新的 mock 实例</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">createFreshMockInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">tap</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$mock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token variable">$mock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$mock</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldAllowMockingProtectedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用于单元测试场景，创建一个的 mock 实例</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">createMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getMockableClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$class</span> <span class="token operator">?</span> Mockery<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> Mockery<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用于单元测试场景，判断是否有创建过 mock 实例</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">isMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>               <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">MockInterface</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用于单元测试场景，获取容器当前所绑定的类名</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getMockableClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$root</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFacadeRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$root</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 替换 Facade 当前所绑定的实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token variable">$instance</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span><span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$instance</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取 Facade 当前可以访问到的实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getFacadeRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">resolveFacadeInstance</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取 Facade 在容器中的 $abstract，一般是字符串类型</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'Facade does not implement getFacadeAccessor method.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从容器中解析出 Facade 对应的类实例</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">resolveFacadeInstance</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$app</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 清除某个被解析过的实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">clearResolvedInstance</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 清除所有被解析过的实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">clearResolvedInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$resolvedInstance</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取容器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getFacadeApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$app</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置容器</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">setFacadeApplication</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$app</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Facade 最核心的一个函数，</span>    <span class="token comment" spellcheck="true">// 当用户以调用静态函数的方式调用一个方法时，</span>    <span class="token comment" spellcheck="true">// 如果类没有定义这个方法，</span>    <span class="token comment" spellcheck="true">// 就会触发 __callStatic 这个魔术方法。</span>    <span class="token comment" spellcheck="true">// 这里，会从容器中解析出 Facade 对应的类实例，</span>    <span class="token comment" spellcheck="true">// 并调用对应的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">__callStatic</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getFacadeRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$instance</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">'A facade root has not been set.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$instance</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$method</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之服务提供者</title>
      <link href="/2018/06/01/shen-ru-laravel-zhi-fu-wu-ti-gong-zhe/"/>
      <url>/2018/06/01/shen-ru-laravel-zhi-fu-wu-ti-gong-zhe/</url>
      
        <content type="html"><![CDATA[<p>服务提供者是 Laravel 的 “引导” 中心。我们自己的程序和 Laravel 的核心程序，都是通过服务提供者引导启动的。</p><blockquote><p>“引导”：注册容器绑定，事件监听器，中间件，路由等。</p></blockquote><h1 id="编写服务提供者"><a href="#编写服务提供者" class="headerlink" title="编写服务提供者"></a>编写服务提供者</h1><pre class=" language-bash"><code class="language-bash">php artisan make:provider RiakServiceProvider</code></pre><p>这个命令会在 app/Providers 生成一个 RiakServiceProvider</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Providers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>ServiceProvider</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RiakServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Bootstrap services.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Register services.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="register-方法"><a href="#register-方法" class="headerlink" title="register 方法"></a>register 方法</h2><p>在 register() 中，我们只能做注册绑定容器的事情，像注册事件监听，注册路由这些都不能在 register() 中处理。<strong>因为 register() 被调用的时候，其他模块可能还没被加载。</strong></p><h2 id="boot-方法"><a href="#boot-方法" class="headerlink" title="boot 方法"></a>boot 方法</h2><p><strong>当所有服务提供者的 register() 方法被调用之后，就会调用 boot() 方法。</strong> 在 boot() 方法我们就可以注册事件监听，路由等需要用到其他模块的事情了。</p><h1 id="注册服务提供者"><a href="#注册服务提供者" class="headerlink" title="注册服务提供者"></a>注册服务提供者</h1><ul><li>在 app/config/app.php 配置文件中，有一个 providers 数组。把我们的 provider 加到这个数组即可</li><li>laravel 5.5 之后支持 package discovery 。如果我们的 service providor 是以 composer 包的形式提供的，可以在 composer.json 参考以下加上一段代码：<pre class=" language-json"><code class="language-json"><span class="token property">"extra"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"laravel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"providers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"Barryvdh\\Debugbar\\ServiceProvider"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"aliases"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"Debugbar"</span><span class="token operator">:</span> <span class="token string">"Barryvdh\\Debugbar\\Facade"</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h1 id="延迟加载服务提供者"><a href="#延迟加载服务提供者" class="headerlink" title="延迟加载服务提供者"></a>延迟加载服务提供者</h1><p>如果你的服务提供者只是注册绑定到服务容器，可以选择使用延迟加载。延迟加载会在真正需要使用这个绑定的时候才运行，可以帮助我们提高性能。</p><p>延迟加载服务提供者，只需要把 $defer 设为 true ，并且定义 provides() 方法。provides() 方法负责返回 register() 中注册的容器绑定。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Providers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Riak<span class="token punctuation">\</span>Connection</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>ServiceProvider</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RiakServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Indicates if loading of the provider is deferred.     *     * @var bool     */</span>    <span class="token keyword">protected</span> <span class="token variable">$defer</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Register the service provider.     *     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">singleton</span><span class="token punctuation">(</span>Connection<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'riak'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get the services provided by the provider.     *     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">provides</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>Connection<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>在 Illuminate\Foundation\Application 的构造函数中，会先注册 event、log 和 routing 三个服务提供者</li><li><p>在 sendRequestThroughRouter 中，会调用 Illuminate\Foundation\Application@bootstrapWith 引导</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">protected</span> <span class="token variable">$bootstrappers</span> <span class="token operator">=</span> <span class="token punctuation">[</span>         \<span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bootstrap<span class="token punctuation">\</span>LoadEnvironmentVariables</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>         \<span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bootstrap<span class="token punctuation">\</span>LoadConfiguration</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>         \<span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bootstrap<span class="token punctuation">\</span>HandleExceptions</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>         \<span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bootstrap<span class="token punctuation">\</span>RegisterFacades</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>         \<span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bootstrap<span class="token punctuation">\</span>RegisterProviders</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>         \<span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bootstrap<span class="token punctuation">\</span>BootProviders</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p> 以上六个 bootstrappers 。其中<br> \Illuminate\Foundation\Bootstrap\RegisterProviders::class 会调用所有的非延迟加载的服务提供者的 register()，把延迟加载的服务提供者记录到 Application 的 $deferredServices 中；<br> \Illuminate\Foundation\Bootstrap\BootProviders::class 会调用所有的非延迟加载的服务提供者的 boot()。</p></li></ol><h2 id="Illuminate-Foundation-Bootstrap-RegisterProviders"><a href="#Illuminate-Foundation-Bootstrap-RegisterProviders" class="headerlink" title="Illuminate\Foundation\Bootstrap\RegisterProviders"></a>Illuminate\Foundation\Bootstrap\RegisterProviders</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">RegisterProviders</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用 Application@registerConfiguredProviders</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span>Application <span class="token variable">$app</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerConfiguredProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">registerConfiguredProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 app/config/app.php 中的 providers 数组</span>    <span class="token variable">$providers</span> <span class="token operator">=</span> Collection<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'app.providers'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">,</span> <span class="token string">'Illuminate\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把 package discovery 注册的服务提供者整合进 $providers</span>    <span class="token variable">$providers</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span>PackageManifest<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">providers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册所有的服务提供者</span>    <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProviderRepository</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Filesystem</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getCachedServicesPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">-</span><span class="token operator">></span><span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$providers</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">collapse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProviderRepository</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$providers</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加载 bootstrap/cache/services.php</span>        <span class="token variable">$manifest</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadManifest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 $manifest 为空或者和 $providers 不一样，会重新生成 bootstrap/cache/services.php</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldRecompile</span><span class="token punctuation">(</span><span class="token variable">$manifest</span><span class="token punctuation">,</span> <span class="token variable">$providers</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$manifest</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">compileManifest</span><span class="token punctuation">(</span><span class="token variable">$providers</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 注册监听事件</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$manifest</span><span class="token punctuation">[</span><span class="token string">'when'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$provider</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$events</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerLoadEvents</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">,</span> <span class="token variable">$events</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 调用服务提供者的 register()</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$manifest</span><span class="token punctuation">[</span><span class="token string">'eager'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$provider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 记录延迟加载的服务提供者</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addDeferredServices</span><span class="token punctuation">(</span><span class="token variable">$manifest</span><span class="token punctuation">[</span><span class="token string">'deferred'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Foundation-Bootstrap-BootProviders"><a href="#Illuminate-Foundation-Bootstrap-BootProviders" class="headerlink" title="Illuminate\Foundation\Bootstrap\BootProviders"></a>Illuminate\Foundation\Bootstrap\BootProviders</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">BootProviders</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span>Application <span class="token variable">$app</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">booted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fireAppCallbacks</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bootingCallbacks</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用所有服务提供者的 boot() 方法</span>        <span class="token function">array_walk</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">serviceProviders</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bootProvider</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">booted</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fireAppCallbacks</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bootedCallbacks</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h2 id="延迟加载的服务提供者的处理"><a href="#延迟加载的服务提供者的处理" class="headerlink" title="延迟加载的服务提供者的处理"></a>延迟加载的服务提供者的处理</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$abstract</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析容器绑定的时候，先判断是不是延迟加载的服务提供者</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">deferredServices</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadDeferredProvider</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">loadDeferredProvider</span><span class="token punctuation">(</span><span class="token variable">$service</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">deferredServices</span><span class="token punctuation">[</span><span class="token variable">$service</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$provider</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">deferredServices</span><span class="token punctuation">[</span><span class="token variable">$service</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果服务提供者还没被加载和注册，就加载和注册，同时把该服务提供者从 $this->deferredServices 移除</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">loadedProviders</span><span class="token punctuation">[</span><span class="token variable">$provider</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">registerDeferredProvider</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">,</span> <span class="token variable">$service</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之服务容器</title>
      <link href="/2018/05/24/shen-ru-laravel-zhi-fu-wu-rong-qi/"/>
      <url>/2018/05/24/shen-ru-laravel-zhi-fu-wu-rong-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇文章<a href="https://lidelin.github.io/2018/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%92%8C%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC/">《设计模式之依赖注入和依赖反转》</a>复习了依赖注入和依赖反转，这篇文章我们来深入探索一下服务容器。<br>服务容器是用来管理类的依赖和实现依赖注入的一个很有用的工具。这里要注意一下，容器仅仅是个工具，可以让我们很方便地实现依赖注入而已，不是必需的。<br>深入理解 Laravel 的服务容器，对于构建大型应用程序，或者给 Laravel 贡献代码，是必不可少的。</p><blockquote><p>PS</p><ul><li>下面写到的 $abstract 可以是一个 interface 名，也可以是一个 string 标识，也可以是一个类，所以大部分情况我都是直接写 $abstract  ，具体要看绑定的时候传的值</li><li>$concrete 可以是一个类，可以是一个类实例，也可以是一个闭包，所以大部分情况都直接写 $concrete ，具体要看绑定的时候传的值</li></ul></blockquote><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><h3 id="基础绑定"><a href="#基础绑定" class="headerlink" title="基础绑定"></a>基础绑定</h3><h4 id="简单绑定"><a href="#简单绑定" class="headerlink" title="简单绑定"></a>简单绑定</h4><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>$abstract 是一个字符串；$concrete 可以是一个类，Closure 或者 null。如果 $concrete 为 null 时，会拿 $abstract 来实例化</li><li>如果 $abstract 之前已经绑定过其他 $concrete ，并且已经实例化过，laravel 马上实例化新绑定的 $concrete ，并且调用 reboundCallbacks </li></ul><h4 id="绑定一个单例"><a href="#绑定一个单例" class="headerlink" title="绑定一个单例"></a>绑定一个单例</h4><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="绑定类实例"><a href="#绑定类实例" class="headerlink" title="绑定类实例"></a>绑定类实例</h4><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$instance</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="绑定初始值"><a href="#绑定初始值" class="headerlink" title="绑定初始值"></a>绑定初始值</h4><p>有时候一个不仅要接受注入另一个类，还需要注入一些初始值（比如一个整数）。这个可以用上下文绑定来实现。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">when</span><span class="token punctuation">(</span><span class="token string">'App\Http\Controllers\UserController'</span><span class="token punctuation">)</span>          <span class="token operator">-</span><span class="token operator">></span><span class="token function">needs</span><span class="token punctuation">(</span><span class="token string">'$variableName'</span><span class="token punctuation">)</span>          <span class="token operator">-</span><span class="token operator">></span><span class="token function">give</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="给接口绑定实现"><a href="#给接口绑定实现" class="headerlink" title="给接口绑定实现"></a>给接口绑定实现</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span>    <span class="token string">'App\Contracts\EventPusher'</span><span class="token punctuation">,</span>    <span class="token string">'App\Services\RedisEventPusher'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样绑定之后，当一个类需要注入 interface EventPusher ，容器就会把 RedisEventPusher 注入进去。</p><h3 id="上下文绑定"><a href="#上下文绑定" class="headerlink" title="上下文绑定"></a>上下文绑定</h3><p>两个不同的类用了同一个接口，注入的时候需要又需要注入不同的实现，可以用上下文绑定。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Storage</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>PhotoController</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>VideoController</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Filesystem<span class="token punctuation">\</span>Filesystem</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">when</span><span class="token punctuation">(</span>PhotoController<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span>          <span class="token operator">-</span><span class="token operator">></span><span class="token function">needs</span><span class="token punctuation">(</span>Filesystem<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span>          <span class="token operator">-</span><span class="token operator">></span><span class="token function">give</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> Storage<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">disk</span><span class="token punctuation">(</span><span class="token string">'local'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">when</span><span class="token punctuation">(</span>VideoController<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span>          <span class="token operator">-</span><span class="token operator">></span><span class="token function">needs</span><span class="token punctuation">(</span>Filesystem<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span>          <span class="token operator">-</span><span class="token operator">></span><span class="token function">give</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> Storage<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">disk</span><span class="token punctuation">(</span><span class="token string">'s3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>有时候，我们会需要一组类别相同的绑定，比如：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'SpeedReport'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'MemoryReport'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'SpeedReport'</span><span class="token punctuation">,</span> <span class="token string">'MemoryReport'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'reports'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样调用之后，我们就可以用 tagged 方法来获取所有 reports 的实例了</p><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'ReportAggregator'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReportAggregator</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">tagged</span><span class="token punctuation">(</span><span class="token string">'reports'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="绑定扩展"><a href="#绑定扩展" class="headerlink" title="绑定扩展"></a>绑定扩展</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">extend</span><span class="token punctuation">(</span>Service<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$service</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DecoratedService</span><span class="token punctuation">(</span><span class="token variable">$service</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="make-方法"><a href="#make-方法" class="headerlink" title="make 方法"></a>make 方法</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$api</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">'HelpSpot\API'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$api</span> <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'HelpSpot\API'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当类的依赖不能从容器中解析出来，可以用 makeWith 方法：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$api</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">makeWith</span><span class="token punctuation">(</span><span class="token string">'HelpSpot\API'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'id'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h3><p>可以直接在 controllers, event listeners, queue jobs, middleware 等类的构造函数声明类的依赖，容器会自动解析并注入需要的依赖。</p><h2 id="容器的事件"><a href="#容器的事件" class="headerlink" title="容器的事件"></a>容器的事件</h2><p>每当服务容器解析一个对象时触发一个事件。可以使用 resolving 方法监听这个事件：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolving</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Called when container resolves object of any type...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolving</span><span class="token punctuation">(</span>HelpSpot\<span class="token package">API</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$api</span><span class="token punctuation">,</span> <span class="token variable">$app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Called when container resolves objects of type "HelpSpot\API"...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="PSR-11"><a href="#PSR-11" class="headerlink" title="PSR-11"></a>PSR-11</h2><p>Laravel 的服务容器实现了 PSR-11 的接口，所以可以直接用 PSR-11 的容器接口来获取 laravel 的容器。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\</span>Container<span class="token punctuation">\</span>ContainerInterface</span><span class="token punctuation">;</span>Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ContainerInterface <span class="token variable">$container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$service</span> <span class="token operator">=</span> <span class="token variable">$container</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Service'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>因为在 bootstrap/app.php 中实例化的是 Illuminate\Foundation\Application ，所以我们从这个类看看 UML 图，如下：<br><img src="https://i.loli.net/2018/05/27/5b0a6c9421486.jpeg" alt="WechatIMG246.jpeg"></p><h2 id="Psr-Container-ContainerInterface"><a href="#Psr-Container-ContainerInterface" class="headerlink" title="Psr\Container\ContainerInterface"></a>Psr\Container\ContainerInterface</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">Psr<span class="token punctuation">\</span>Container</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">ContainerInterface</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过 $id 从容器找出对应的实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果容器中有 $id 对应的实例，则返回 true，否则返回 false     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Illuminate-Contracts-Container-Container"><a href="#Illuminate-Contracts-Container-Container" class="headerlink" title="Illuminate\Contracts\Container\Container"></a>Illuminate\Contracts\Container\Container</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Container</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\</span>Container<span class="token punctuation">\</span>ContainerInterface</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Container</span> <span class="token keyword">extends</span> <span class="token class-name">ContainerInterface</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 确定 $abstract 有没有被绑定过     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bound</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 给 $abstract 起一个别名     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">alias</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$alias</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 给一系列的绑定打个标记     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token variable">$abstracts</span><span class="token punctuation">,</span> <span class="token variable">$tags</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 解析某个标记的所有实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">tagged</span><span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 与容器注册绑定     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token variable">$shared</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果 $abstract 没注册过绑定，则注册绑定     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bindIf</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token variable">$shared</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 在容器中注册一个共享的绑定，即单例     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">singleton</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 扩展容器中 $abstract 的实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> Closure <span class="token variable">$closure</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用一个类实例与容器注册一个共享的绑定     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$instance</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 定义一个上下文绑定     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从容器获取一个闭包来解析 $abstract 的实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 从容器解析 $abstract 的实例并返回     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 调用给出的闭包或者类方法，并且注入所需的依赖     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$defaultMethod</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 确定 $abstract 是否被解析过     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">resolved</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注册容器解析对象时的回调     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">resolving</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> Closure <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 注册调用完 resolving 注册的回调的回调     * 有点绕，就是调用了上面 resolving 注册的回调之后，     * 就会调用 afterResolving 注册的回调     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">afterResolving</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> Closure <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * Register a binding with the container. * * @param  string  $abstract * @param  \Closure|string|null  $concrete * @param  bool  $shared * @return void */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token variable">$shared</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把旧的绑定 unset 掉</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dropStaleInstances</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$abstract</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果 $concrete 不是 Closure ，就是一个类，</span>    <span class="token comment" spellcheck="true">// 为了后续使用方便，这里会把类转出一个闭包</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$concrete</span> <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getClosure</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把绑定存到 $this->bindings</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string">'concrete'</span><span class="token punctuation">,</span> <span class="token string">'shared'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 $abstract 之前已经绑定过其他 $concrete ，</span>    <span class="token comment" spellcheck="true">// 并且已经实例化过，laravel 马上实例化新绑定的 $concrete ，</span>    <span class="token comment" spellcheck="true">// 并且调用 reboundCallbacks</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolved</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rebound</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h2><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * Register a shared binding in the container. * * @param  string  $abstract * @param  \Closure|string|null  $concrete * @return void */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">singleton</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>singleton 很简单，仅仅把 bind 的第三个参数设为 true ，在实例化完之后，就会把对象存到 $this-&gt;instances 数组中，下次需要使用这个对象的时候，直接取出来。</p><h2 id="instance"><a href="#instance" class="headerlink" title="instance"></a>instance</h2><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * Register an existing instance as shared in the container. * * @param  string  $abstract * @param  mixed   $instance * @return mixed */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$instance</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 移除 $abstract 之前绑定过的别名</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">removeAbstractAlias</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断 $abstract 之前是否已经绑定过类实例了</span>    <span class="token variable">$isBound</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bound</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">aliases</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存新的实例</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果之前绑定过实例，则触发重新绑定的处理</span>    <span class="token comment" spellcheck="true">// 比如调用 rebound callbacks</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$isBound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rebound</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$instance</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>我们重点看一下 make()</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 $abstract 真正的类</span>    <span class="token variable">$abstract</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAlias</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 确定是否需要上下文构建</span>    <span class="token variable">$needsContextualBuild</span> <span class="token operator">=</span> <span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getContextualConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果绑定的是一个单例，并且已经实例化，</span>    <span class="token comment" spellcheck="true">// 而且不需要上下文构建，则直接返回类实例</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token variable">$needsContextualBuild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">with</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取之前绑定时准备好的闭包</span>    <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConcrete</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isBuildable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果 $concrete 和 $abstract 是相同的类，</span>        <span class="token comment" spellcheck="true">// 或者 $concrete 是一个闭包，</span>        <span class="token comment" spellcheck="true">// 则构建实例</span>        <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">build</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归调用来解析出所有的实例</span>        <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用之前注册的扩展回调，decorate 上面创建的对象</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getExtenders</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$extender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token variable">$extender</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果 $abstract 注册的绑定是单例，则把上面创建的对象保存到 $this->instances</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isShared</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token variable">$needsContextualBuild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$object</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 触发绑定事件，调用之前注册的回调</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fireResolvingCallbacks</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录已经解析的 $abstract</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">resolved</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">with</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$object</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果 $concrete 是闭包，则直接调用并返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$concrete</span> <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$concrete</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getLastParameterOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果 $concrete 是类，则用反射去解析</span>    <span class="token variable">$reflector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果 $concrete 不能实例化，</span>    <span class="token comment" spellcheck="true">// 则抛出 \Illuminate\Contracts\Container\BindingResolutionException </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">notInstantiable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把 $concrete 类放到构建栈，因为要构建 $concrete 构造函数的依赖</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buildStack</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$concrete</span><span class="token punctuation">;</span>    <span class="token variable">$constructor</span> <span class="token operator">=</span> <span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果没有构造函数，说明没有依赖，则直接 new $concrete 并返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$constructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buildStack</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token variable">$concrete</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$dependencies</span> <span class="token operator">=</span> <span class="token variable">$constructor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析构造函数的所有依赖，</span>    <span class="token comment" spellcheck="true">// 如果依赖是一个类，则会调用 public function make($abstract, array $parameters = []) 去解析出实例，</span>    <span class="token comment" spellcheck="true">// 直到所有的依赖都解析出来</span>    <span class="token variable">$instances</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resolveDependencies</span><span class="token punctuation">(</span>        <span class="token variable">$dependencies</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">buildStack</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newInstanceArgs</span><span class="token punctuation">(</span><span class="token variable">$instances</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之依赖注入和依赖反转</title>
      <link href="/2018/05/20/she-ji-mo-shi-zhi-yi-lai-zhu-ru-he-yi-lai-fan-zhuan/"/>
      <url>/2018/05/20/she-ji-mo-shi-zhi-yi-lai-zhu-ru-he-yi-lai-fan-zhuan/</url>
      
        <content type="html"><![CDATA[<p>服务容器是用来管理类的依赖和实现依赖注入的一个很有用的工具，是 Laravel 的核心。我们在学习服务容器前，要先理解依赖注入和依赖反转。</p><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><p><strong>依赖注入的目的是解耦。</strong><br>依赖注入从本质上来讲，就是<strong>把依赖通过构造函数或者 setter 方法传进去。</strong></p><h2 id="非依赖注入例子"><a href="#非依赖注入例子" class="headerlink" title="非依赖注入例子"></a>非依赖注入例子</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$users</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'user.profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$user</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上这段代码，在 UserController 的构造函数中创建 UserRepository ，这样的话 UserController 就和 UserRepository 产生了耦合，使得更换 users 的数据来源或者对 UserController 测试非常困难。</p><h2 id="依赖注入例子"><a href="#依赖注入例子" class="headerlink" title="依赖注入例子"></a>依赖注入例子</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$users</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>UserRepository <span class="token variable">$userRepository</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span> <span class="token operator">=</span> <span class="token variable">$userRepository</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'user.profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$user</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>改造一下，把 UserRepository 通过 UserController 的构造函数传进去 ，UserController 没有直接依赖 UserRepository ，达到了解耦的目的 。</p><h1 id="依赖反转"><a href="#依赖反转" class="headerlink" title="依赖反转"></a>依赖反转</h1><p>说到依赖注入，就不得不说一下依赖反转了。那什么是依赖反转呢？<br><strong> 本质上来讲，依赖反转就是不依赖实体类，而依赖抽象，即依赖 interface。 </strong><br>为什么依赖 interface 就是控制反转呢？<br>先看看依赖反转的原则：</p><blockquote><p>High-level modules should not depend on low-level modules. Both should depend on abstractions.<br>高阶模组不应该依赖低阶模组，两者都应该依赖抽象。</p></blockquote><p>高阶和低阶是相对的。简单来说，当 class A 去 new class B 时，A 是高阶模组，B 是低阶模组。</p><h2 id="非依赖反转例子"><a href="#非依赖反转例子" class="headerlink" title="非依赖反转例子"></a>非依赖反转例子</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$users</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>UserRepositoryEloquent <span class="token variable">$userRepositoryEloquent</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span> <span class="token operator">=</span> <span class="token variable">$userRepositoryEloquent</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'user.profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$user</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserRepositoryEloquent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$controller</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserRepositoryEloquent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$controller</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在使用 UserController 时一定要 new UserRepositoryEloquent ，UserController 依赖了 UserRepositoryEloquent。</p><h2 id="依赖反转例子"><a href="#依赖反转例子" class="headerlink" title="依赖反转例子"></a>依赖反转例子</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$users</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>UserRepository <span class="token variable">$userRepository</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span> <span class="token operator">=</span> <span class="token variable">$userRepository</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">users</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'user.profile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$user</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserRepositoryEloquent</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepository</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserRepositoryDoctrine</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepository</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> UserDoctrine<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$userRepositoryEloquent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRepositoryEloquent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$userRepositoryDoctrine</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRepositoryDoctrine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 Eloquent ORM</span><span class="token variable">$controller</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token variable">$userRepositoryEloquent</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$controller</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 Doctrine ORM</span><span class="token variable">$controller</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token variable">$userRepositoryDoctrine</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$controller</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>UserController 没有依赖具体的用户仓库类，而是定义了一个 UserRepository interface，所有的用户仓库类都必须实现这个 interface 。<br>我们根据 UserController 的需求，定义了 UserRepository interface ，要求所有的用户仓库类要遵循 UserRepository interface。<br><strong>原来 UserController 要依赖 UserRepositoryEloquent ，使用时要按  UserRepositoryEloquent 提供的方法来，现在反过来，变成了UserRepositoryEloquent 要遵循 UserController 定义的 UserRepository interface 来提供数据，所以叫做依赖反转。</strong></p><p>依赖反转的代码比非依赖反转的代码多写了一个 interface ，增加了码代码的工作量。那为什么要这样做呢？<br>从上面的代码我们可以看到，UserController 切换不同方式实现的用户仓库变得非常简单。以后如果还有更多方式实现的用户仓库，只要实现 UserRepository interface 并且传给 UserController 就可以了，UserController 不需要做任何改动。这样做可以大大地提高了灵活性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://oomusou.io/tdd/tdd-di/#%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5" target="_blank" rel="noopener">http://oomusou.io/tdd/tdd-di/#%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DesignPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入 Laravel 之请求的生命周期</title>
      <link href="/2018/05/12/shen-ru-laravel-zhi-qing-qiu-de-sheng-ming-zhou-qi/"/>
      <url>/2018/05/12/shen-ru-laravel-zhi-qing-qiu-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>请求的生命周期，即 Laravel 处理请求的整个流程。理解这个流程，有助于我们了解 Laravel 的整体架构。</p></blockquote><h1 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h1><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://i.loli.net/2018/05/13/5af7f2574aafe.png" alt></p><h2 id="index-php-分析"><a href="#index-php-分析" class="headerlink" title="index.php 分析"></a>index.php 分析</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// 加载 composer 的 autoloader ，用于处理类的加载</span><span class="token keyword">require</span> <span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/../vendor/autoload.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// app.php 里面主要做了两件事：</span><span class="token comment" spellcheck="true">// 1. 创建 IoC 容器</span><span class="token comment" spellcheck="true">// 2. 绑定 http 请求处理核心程序、控制台命令处理核心程序和异常处理程序</span><span class="token variable">$app</span> <span class="token operator">=</span> <span class="token keyword">require_once</span> <span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/../bootstrap/app.php'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从 IoC 容器中取出在 app.php 绑定的 http 请求处理程序</span><span class="token variable">$kernel</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span>Illuminate\<span class="token package">Contracts<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Kernel</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Illuminate\Http\Request::capture() 主要是创建一个封装了 php 的 $_GET、$_POST、$_COOKIE、$_FILES、$_SERVER 全局变量的 Request 对象</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// $kernel->handle() 主要做了以下事情：</span><span class="token comment" spellcheck="true">// 1. 启动 Laravel ，包括：</span><span class="token comment" spellcheck="true">//     1）加载 .env 的环境变量</span><span class="token comment" spellcheck="true">//     2）加载 config 目录的配置</span><span class="token comment" spellcheck="true">//     3）设置错误和异常的处理程序</span><span class="token comment" spellcheck="true">//     4）注册 Facade</span><span class="token comment" spellcheck="true">//     5）注册和启动 service provider</span><span class="token comment" spellcheck="true">// 2. 通过全局中间件过滤和处理 Request 对象</span><span class="token comment" spellcheck="true">// 3. 把 Request 对象分发给 Router 处理并返回 Response</span><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$kernel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">handle</span><span class="token punctuation">(</span>    <span class="token variable">$request</span> <span class="token operator">=</span> Illuminate\<span class="token package">Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把 response 返回给请求者</span><span class="token variable">$response</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理收尾工作，例如保存 session</span><span class="token variable">$kernel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="晦涩代码分析"><a href="#晦涩代码分析" class="headerlink" title="晦涩代码分析"></a>晦涩代码分析</h1><pre class=" language-php"><code class="language-php">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">sendRequestThroughRouter</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">through</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldSkipMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">middleware</span><span class="token punctuation">)</span>                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">then</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dispatchToRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>这里用到了管道设计模式。想了解管道设计模式，可以戳这个<a href="http://laravelacademy.org/post/3088.html" target="_blank" rel="noopener">链接</a>。<br>这里可以根据语义理解为，把 $request 发出去，通过 middleware 的处理后，分发给 router 。</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">then</span><span class="token punctuation">(</span>Closure <span class="token variable">$destination</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pipeline</span> <span class="token operator">=</span> <span class="token function">array_reduce</span><span class="token punctuation">(</span>        <span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pipes</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">carry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepareDestination</span><span class="token punctuation">(</span><span class="token variable">$destination</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$pipeline</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">passable</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>send() 和 through() 都是简单地把变量存下来，最后统一在 then() 处理，所以我们重点看一下 then() 的实现。</p></blockquote><blockquote><p>array_reverse($this-&gt;pipes) 只是把 $this-&gt;pipes 的顺序逆转一下，比较难理解的是 $this-&gt;carry() 。<br>先看一下 array_reduce 的说明</p></blockquote><pre class=" language-php"><code class="language-php">mixed <span class="token function">array_reduce</span> <span class="token punctuation">(</span> <span class="token keyword">array</span> <span class="token variable">$array</span> <span class="token punctuation">,</span> callable <span class="token variable">$callback</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mixed <span class="token variable">$initial</span> <span class="token operator">=</span> <span class="token keyword">NULL</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span></code></pre><blockquote><p>array_reduce() 将回调函数 callback 迭代地作用到 array 数组中的每一个单元中，从而将数组简化为单一的值。最好先看看<a href="http://php.net/manual/zh/function.array-reduce.php" target="_blank" rel="noopener">例子</a>。</p></blockquote><blockquote><p>carry() 的实现如下：</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * Get a Closure that represents a slice of the application onion. * * @return \Closure */</span><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">carry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$stack</span><span class="token punctuation">,</span> <span class="token variable">$pipe</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$stack</span><span class="token punctuation">,</span> <span class="token variable">$pipe</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$pipe</span><span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">,</span> <span class="token variable">$stack</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parsePipeString</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$pipe</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$passable</span><span class="token punctuation">,</span> <span class="token variable">$stack</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$passable</span><span class="token punctuation">,</span> <span class="token variable">$stack</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">)</span>                            <span class="token operator">?</span> <span class="token variable">$pipe</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$parameters</span><span class="token punctuation">)</span>                            <span class="token punctuation">:</span> <span class="token variable">$pipe</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>里面有两个闭包，第一个</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$stack</span><span class="token punctuation">,</span> <span class="token variable">$pipe</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><blockquote><p>这个闭包是给 array_reduce 调用的，会把 $this-&gt;pipes ，也就是中间件，迭代地传进来</p><p>第二个闭包，</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$stack</span><span class="token punctuation">,</span> <span class="token variable">$pipe</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">)</span>                            <span class="token operator">?</span> <span class="token variable">$pipe</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$parameters</span><span class="token punctuation">)</span>                            <span class="token punctuation">:</span> <span class="token variable">$pipe</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>主要是返回调用中间件 handle 方法的闭包</p></blockquote><pre class=" language-php"><code class="language-php"><span class="token variable">$pipeline</span> <span class="token operator">=</span> <span class="token function">array_reduce</span><span class="token punctuation">(</span>        <span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pipes</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">carry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepareDestination</span><span class="token punctuation">(</span><span class="token variable">$destination</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong> 执行完上面这句代码的时候，中间件还没有被执行，此时只是生成了一个使用了装饰者模式，把中间件一层一层，像洋葱一样包裹起来的闭包。 </strong></p><pre class=" language-php"><code class="language-php"><span class="token keyword">return</span> <span class="token variable">$pipeline</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">passable</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong> 在执行这一句的时候，才会一层一层地真正执行中间件的代码。 </strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
